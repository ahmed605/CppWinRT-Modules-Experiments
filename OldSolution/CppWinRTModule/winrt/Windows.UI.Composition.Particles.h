// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.210505.3

#ifndef WINRT_Windows_UI_Composition_Particles_H
#define WINRT_Windows_UI_Composition_Particles_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.0.210505.3"), "Mismatched C++/WinRT headers.");
#define CPPWINRT_VERSION "2.0.210505.3"
#include "winrt/Windows.UI.Composition.h"
#include "winrt/impl/Windows.Foundation.2.h"
#include "winrt/impl/Windows.Foundation.Collections.2.h"
#include "winrt/impl/Windows.Foundation.Numerics.2.h"
#include "winrt/impl/Windows.UI.2.h"
#include "winrt/impl/Windows.UI.Composition.2.h"
#include "winrt/impl/Windows.UI.Composition.Particles.2.h"
namespace winrt::impl
{
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Foundation::Numerics::float3) consume_Windows_UI_Composition_Particles_IParticleAttractor<D>::Offset() const
    {
        winrt::Windows::Foundation::Numerics::float3 value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleAttractor)->get_Offset(put_abi(value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Windows_UI_Composition_Particles_IParticleAttractor<D>::Offset(winrt::Windows::Foundation::Numerics::float3 const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleAttractor)->put_Offset(impl::bind_in(value)));
    }
    template <typename D> WINRT_IMPL_AUTO(float) consume_Windows_UI_Composition_Particles_IParticleAttractor<D>::Radius() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleAttractor)->get_Radius(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Windows_UI_Composition_Particles_IParticleAttractor<D>::Radius(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleAttractor)->put_Radius(value));
    }
    template <typename D> WINRT_IMPL_AUTO(float) consume_Windows_UI_Composition_Particles_IParticleAttractor<D>::Strength() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleAttractor)->get_Strength(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Windows_UI_Composition_Particles_IParticleAttractor<D>::Strength(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleAttractor)->put_Strength(value));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::UI::Composition::Particles::ParticleAttractor) consume_Windows_UI_Composition_Particles_IParticleAttractorStatics<D>::Create(winrt::Windows::UI::Composition::Compositor const& compositor) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleAttractorStatics)->Create(*(void**)(&compositor), &result));
        return winrt::Windows::UI::Composition::Particles::ParticleAttractor{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::UI::Composition::Particles::ParticleInputSource) consume_Windows_UI_Composition_Particles_IParticleBaseBehavior<D>::Input() const
    {
        winrt::Windows::UI::Composition::Particles::ParticleInputSource value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleBaseBehavior)->get_Input(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Windows_UI_Composition_Particles_IParticleBaseBehavior<D>::Input(winrt::Windows::UI::Composition::Particles::ParticleInputSource const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleBaseBehavior)->put_Input(static_cast<int32_t>(value)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::UI::Composition::Particles::ParticleScalarBehavior) consume_Windows_UI_Composition_Particles_IParticleBehaviors<D>::AngularVelocity() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleBehaviors)->get_AngularVelocity(&value));
        return winrt::Windows::UI::Composition::Particles::ParticleScalarBehavior{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Windows_UI_Composition_Particles_IParticleBehaviors<D>::AngularVelocity(winrt::Windows::UI::Composition::Particles::ParticleScalarBehavior const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleBehaviors)->put_AngularVelocity(*(void**)(&value)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::UI::Composition::Particles::ParticleVector3Behavior) consume_Windows_UI_Composition_Particles_IParticleBehaviors<D>::Direction() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleBehaviors)->get_Direction(&value));
        return winrt::Windows::UI::Composition::Particles::ParticleVector3Behavior{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Windows_UI_Composition_Particles_IParticleBehaviors<D>::Direction(winrt::Windows::UI::Composition::Particles::ParticleVector3Behavior const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleBehaviors)->put_Direction(*(void**)(&value)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::UI::Composition::Particles::ParticleVector3Behavior) consume_Windows_UI_Composition_Particles_IParticleBehaviors<D>::Force() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleBehaviors)->get_Force(&value));
        return winrt::Windows::UI::Composition::Particles::ParticleVector3Behavior{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Windows_UI_Composition_Particles_IParticleBehaviors<D>::Force(winrt::Windows::UI::Composition::Particles::ParticleVector3Behavior const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleBehaviors)->put_Force(*(void**)(&value)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::UI::Composition::Particles::ParticleScalarBehavior) consume_Windows_UI_Composition_Particles_IParticleBehaviors<D>::Opacity() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleBehaviors)->get_Opacity(&value));
        return winrt::Windows::UI::Composition::Particles::ParticleScalarBehavior{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Windows_UI_Composition_Particles_IParticleBehaviors<D>::Opacity(winrt::Windows::UI::Composition::Particles::ParticleScalarBehavior const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleBehaviors)->put_Opacity(*(void**)(&value)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::UI::Composition::Particles::ParticleVector4Behavior) consume_Windows_UI_Composition_Particles_IParticleBehaviors<D>::Orientation() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleBehaviors)->get_Orientation(&value));
        return winrt::Windows::UI::Composition::Particles::ParticleVector4Behavior{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Windows_UI_Composition_Particles_IParticleBehaviors<D>::Orientation(winrt::Windows::UI::Composition::Particles::ParticleVector4Behavior const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleBehaviors)->put_Orientation(*(void**)(&value)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::UI::Composition::Particles::ParticleVector3Behavior) consume_Windows_UI_Composition_Particles_IParticleBehaviors<D>::Position() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleBehaviors)->get_Position(&value));
        return winrt::Windows::UI::Composition::Particles::ParticleVector3Behavior{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Windows_UI_Composition_Particles_IParticleBehaviors<D>::Position(winrt::Windows::UI::Composition::Particles::ParticleVector3Behavior const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleBehaviors)->put_Position(*(void**)(&value)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::UI::Composition::Particles::ParticleVector2Behavior) consume_Windows_UI_Composition_Particles_IParticleBehaviors<D>::Scale() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleBehaviors)->get_Scale(&value));
        return winrt::Windows::UI::Composition::Particles::ParticleVector2Behavior{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Windows_UI_Composition_Particles_IParticleBehaviors<D>::Scale(winrt::Windows::UI::Composition::Particles::ParticleVector2Behavior const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleBehaviors)->put_Scale(*(void**)(&value)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::UI::Composition::Particles::ParticleScalarBehavior) consume_Windows_UI_Composition_Particles_IParticleBehaviors<D>::Speed() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleBehaviors)->get_Speed(&value));
        return winrt::Windows::UI::Composition::Particles::ParticleScalarBehavior{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Windows_UI_Composition_Particles_IParticleBehaviors<D>::Speed(winrt::Windows::UI::Composition::Particles::ParticleScalarBehavior const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleBehaviors)->put_Speed(*(void**)(&value)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::UI::Composition::Particles::ParticleColorBehavior) consume_Windows_UI_Composition_Particles_IParticleBehaviors<D>::Tint() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleBehaviors)->get_Tint(&value));
        return winrt::Windows::UI::Composition::Particles::ParticleColorBehavior{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Windows_UI_Composition_Particles_IParticleBehaviors<D>::Tint(winrt::Windows::UI::Composition::Particles::ParticleColorBehavior const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleBehaviors)->put_Tint(*(void**)(&value)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::UI::Composition::Particles::ParticleColorBindingCollection) consume_Windows_UI_Composition_Particles_IParticleColorBehavior<D>::Bindings() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleColorBehavior)->get_Bindings(&value));
        return winrt::Windows::UI::Composition::Particles::ParticleColorBindingCollection{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::UI::Composition::Particles::ParticleColorBehavior) consume_Windows_UI_Composition_Particles_IParticleColorBehaviorStatics<D>::Create(winrt::Windows::UI::Composition::Compositor const& compositor) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleColorBehaviorStatics)->Create(*(void**)(&compositor), &result));
        return winrt::Windows::UI::Composition::Particles::ParticleColorBehavior{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(float) consume_Windows_UI_Composition_Particles_IParticleEmitterVisual<D>::AngularDrag() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleEmitterVisual)->get_AngularDrag(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Windows_UI_Composition_Particles_IParticleEmitterVisual<D>::AngularDrag(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleEmitterVisual)->put_AngularDrag(value));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::UI::Composition::Particles::ParticleAttractorCollection) consume_Windows_UI_Composition_Particles_IParticleEmitterVisual<D>::Attractors() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleEmitterVisual)->get_Attractors(&value));
        return winrt::Windows::UI::Composition::Particles::ParticleAttractorCollection{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::UI::Composition::CompositionBrush) consume_Windows_UI_Composition_Particles_IParticleEmitterVisual<D>::Brush() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleEmitterVisual)->get_Brush(&value));
        return winrt::Windows::UI::Composition::CompositionBrush{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Windows_UI_Composition_Particles_IParticleEmitterVisual<D>::Brush(winrt::Windows::UI::Composition::CompositionBrush const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleEmitterVisual)->put_Brush(*(void**)(&value)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Foundation::Numerics::float3) consume_Windows_UI_Composition_Particles_IParticleEmitterVisual<D>::Drag() const
    {
        winrt::Windows::Foundation::Numerics::float3 value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleEmitterVisual)->get_Drag(put_abi(value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Windows_UI_Composition_Particles_IParticleEmitterVisual<D>::Drag(winrt::Windows::Foundation::Numerics::float3 const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleEmitterVisual)->put_Drag(impl::bind_in(value)));
    }
    template <typename D> WINRT_IMPL_AUTO(float) consume_Windows_UI_Composition_Particles_IParticleEmitterVisual<D>::EdgeThickness() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleEmitterVisual)->get_EdgeThickness(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Windows_UI_Composition_Particles_IParticleEmitterVisual<D>::EdgeThickness(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleEmitterVisual)->put_EdgeThickness(value));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::UI::Composition::Particles::ParticleEmitFrom) consume_Windows_UI_Composition_Particles_IParticleEmitterVisual<D>::EmitFrom() const
    {
        winrt::Windows::UI::Composition::Particles::ParticleEmitFrom value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleEmitterVisual)->get_EmitFrom(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Windows_UI_Composition_Particles_IParticleEmitterVisual<D>::EmitFrom(winrt::Windows::UI::Composition::Particles::ParticleEmitFrom const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleEmitterVisual)->put_EmitFrom(static_cast<int32_t>(value)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::UI::Composition::CompositionGeometry) consume_Windows_UI_Composition_Particles_IParticleEmitterVisual<D>::EmitterGeometry() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleEmitterVisual)->get_EmitterGeometry(&value));
        return winrt::Windows::UI::Composition::CompositionGeometry{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Windows_UI_Composition_Particles_IParticleEmitterVisual<D>::EmitterGeometry(winrt::Windows::UI::Composition::CompositionGeometry const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleEmitterVisual)->put_EmitterGeometry(*(void**)(&value)));
    }
    template <typename D> WINRT_IMPL_AUTO(float) consume_Windows_UI_Composition_Particles_IParticleEmitterVisual<D>::EmitterLifetime() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleEmitterVisual)->get_EmitterLifetime(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::UI::Composition::CompositionViewBox) consume_Windows_UI_Composition_Particles_IParticleEmitterVisual<D>::EmitterViewBox() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleEmitterVisual)->get_EmitterViewBox(&value));
        return winrt::Windows::UI::Composition::CompositionViewBox{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Windows_UI_Composition_Particles_IParticleEmitterVisual<D>::EmitterViewBox(winrt::Windows::UI::Composition::CompositionViewBox const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleEmitterVisual)->put_EmitterViewBox(*(void**)(&value)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Foundation::Numerics::float3) consume_Windows_UI_Composition_Particles_IParticleEmitterVisual<D>::Force() const
    {
        winrt::Windows::Foundation::Numerics::float3 value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleEmitterVisual)->get_Force(put_abi(value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Windows_UI_Composition_Particles_IParticleEmitterVisual<D>::Force(winrt::Windows::Foundation::Numerics::float3 const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleEmitterVisual)->put_Force(impl::bind_in(value)));
    }
    template <typename D> WINRT_IMPL_AUTO(float) consume_Windows_UI_Composition_Particles_IParticleEmitterVisual<D>::MaxBurstRateInSeconds() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleEmitterVisual)->get_MaxBurstRateInSeconds(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Windows_UI_Composition_Particles_IParticleEmitterVisual<D>::MaxBurstRateInSeconds(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleEmitterVisual)->put_MaxBurstRateInSeconds(value));
    }
    template <typename D> WINRT_IMPL_AUTO(uint32_t) consume_Windows_UI_Composition_Particles_IParticleEmitterVisual<D>::MaxParticleInstances() const
    {
        uint32_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleEmitterVisual)->get_MaxParticleInstances(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Windows_UI_Composition_Particles_IParticleEmitterVisual<D>::MaxParticleInstances(uint32_t value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleEmitterVisual)->put_MaxParticleInstances(value));
    }
    template <typename D> WINRT_IMPL_AUTO(float) consume_Windows_UI_Composition_Particles_IParticleEmitterVisual<D>::MaxParticlesPerBurst() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleEmitterVisual)->get_MaxParticlesPerBurst(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Windows_UI_Composition_Particles_IParticleEmitterVisual<D>::MaxParticlesPerBurst(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleEmitterVisual)->put_MaxParticlesPerBurst(value));
    }
    template <typename D> WINRT_IMPL_AUTO(float) consume_Windows_UI_Composition_Particles_IParticleEmitterVisual<D>::MinBurstRateInSeconds() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleEmitterVisual)->get_MinBurstRateInSeconds(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Windows_UI_Composition_Particles_IParticleEmitterVisual<D>::MinBurstRateInSeconds(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleEmitterVisual)->put_MinBurstRateInSeconds(value));
    }
    template <typename D> WINRT_IMPL_AUTO(float) consume_Windows_UI_Composition_Particles_IParticleEmitterVisual<D>::MinParticlesPerBurst() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleEmitterVisual)->get_MinParticlesPerBurst(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Windows_UI_Composition_Particles_IParticleEmitterVisual<D>::MinParticlesPerBurst(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleEmitterVisual)->put_MinParticlesPerBurst(value));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::UI::Composition::Particles::ParticleBehaviors) consume_Windows_UI_Composition_Particles_IParticleEmitterVisual<D>::ParticleBehaviors() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleEmitterVisual)->get_ParticleBehaviors(&value));
        return winrt::Windows::UI::Composition::Particles::ParticleBehaviors{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Windows_UI_Composition_Particles_IParticleEmitterVisual<D>::ParticleBehaviors(winrt::Windows::UI::Composition::Particles::ParticleBehaviors const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleEmitterVisual)->put_ParticleBehaviors(*(void**)(&value)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::UI::Composition::Particles::ParticleGenerator) consume_Windows_UI_Composition_Particles_IParticleEmitterVisual<D>::ParticleGenerator() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleEmitterVisual)->get_ParticleGenerator(&value));
        return winrt::Windows::UI::Composition::Particles::ParticleGenerator{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Windows_UI_Composition_Particles_IParticleEmitterVisual<D>::ParticleGenerator(winrt::Windows::UI::Composition::Particles::ParticleGenerator const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleEmitterVisual)->put_ParticleGenerator(*(void**)(&value)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Foundation::Numerics::float3) consume_Windows_UI_Composition_Particles_IParticleEmitterVisual<D>::TerminalVelocity() const
    {
        winrt::Windows::Foundation::Numerics::float3 value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleEmitterVisual)->get_TerminalVelocity(put_abi(value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Windows_UI_Composition_Particles_IParticleEmitterVisual<D>::TerminalVelocity(winrt::Windows::Foundation::Numerics::float3 const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleEmitterVisual)->put_TerminalVelocity(impl::bind_in(value)));
    }
    template <typename D> WINRT_IMPL_AUTO(float) consume_Windows_UI_Composition_Particles_IParticleEmitterVisual<D>::Timestep() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleEmitterVisual)->get_Timestep(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Windows_UI_Composition_Particles_IParticleEmitterVisual<D>::Timestep(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleEmitterVisual)->put_Timestep(value));
    }
    template <typename D> WINRT_IMPL_AUTO(float) consume_Windows_UI_Composition_Particles_IParticleEmitterVisual<D>::Torque() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleEmitterVisual)->get_Torque(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Windows_UI_Composition_Particles_IParticleEmitterVisual<D>::Torque(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleEmitterVisual)->put_Torque(value));
    }
    template <typename D> WINRT_IMPL_AUTO(uint32_t) consume_Windows_UI_Composition_Particles_IParticleEmitterVisual<D>::RandomSeed() const
    {
        uint32_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleEmitterVisual)->get_RandomSeed(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Windows_UI_Composition_Particles_IParticleEmitterVisual<D>::RandomSeed(uint32_t value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleEmitterVisual)->put_RandomSeed(value));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::UI::Composition::Particles::ParticleSortMode) consume_Windows_UI_Composition_Particles_IParticleEmitterVisual<D>::SortMode() const
    {
        winrt::Windows::UI::Composition::Particles::ParticleSortMode value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleEmitterVisual)->get_SortMode(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Windows_UI_Composition_Particles_IParticleEmitterVisual<D>::SortMode(winrt::Windows::UI::Composition::Particles::ParticleSortMode const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleEmitterVisual)->put_SortMode(static_cast<int32_t>(value)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Windows_UI_Composition_Particles_IParticleEmitterVisual<D>::Clear() const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleEmitterVisual)->Clear());
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Windows_UI_Composition_Particles_IParticleEmitterVisual<D>::Pause() const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleEmitterVisual)->Pause());
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Windows_UI_Composition_Particles_IParticleEmitterVisual<D>::Resume() const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleEmitterVisual)->Resume());
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Windows_UI_Composition_Particles_IParticleEmitterVisual<D>::Start(winrt::Windows::Foundation::TimeSpan const& lifetime, winrt::Windows::Foundation::TimeSpan const& preWarmTime, bool loop) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleEmitterVisual)->Start(impl::bind_in(lifetime), impl::bind_in(preWarmTime), loop));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Windows_UI_Composition_Particles_IParticleEmitterVisual<D>::Stop() const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleEmitterVisual)->Stop());
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::UI::Composition::Particles::ParticleEmitterVisual) consume_Windows_UI_Composition_Particles_IParticleEmitterVisualStatics<D>::Create(winrt::Windows::UI::Composition::Compositor const& compositor) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleEmitterVisualStatics)->Create(*(void**)(&compositor), &result));
        return winrt::Windows::UI::Composition::Particles::ParticleEmitterVisual{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_Windows_UI_Composition_Particles_IParticleGenerator<D>::GenerateShortestAngleBetweenDirections() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleGenerator)->get_GenerateShortestAngleBetweenDirections(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Windows_UI_Composition_Particles_IParticleGenerator<D>::GenerateShortestAngleBetweenDirections(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleGenerator)->put_GenerateShortestAngleBetweenDirections(value));
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_Windows_UI_Composition_Particles_IParticleGenerator<D>::GenerateUniformSizes() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleGenerator)->get_GenerateUniformSizes(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Windows_UI_Composition_Particles_IParticleGenerator<D>::GenerateUniformSizes(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleGenerator)->put_GenerateUniformSizes(value));
    }
    template <typename D> WINRT_IMPL_AUTO(float) consume_Windows_UI_Composition_Particles_IParticleGenerator<D>::MaxAngularVelocity() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleGenerator)->get_MaxAngularVelocity(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Windows_UI_Composition_Particles_IParticleGenerator<D>::MaxAngularVelocity(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleGenerator)->put_MaxAngularVelocity(value));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Foundation::Numerics::float3) consume_Windows_UI_Composition_Particles_IParticleGenerator<D>::MaxDirection() const
    {
        winrt::Windows::Foundation::Numerics::float3 value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleGenerator)->get_MaxDirection(put_abi(value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Windows_UI_Composition_Particles_IParticleGenerator<D>::MaxDirection(winrt::Windows::Foundation::Numerics::float3 const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleGenerator)->put_MaxDirection(impl::bind_in(value)));
    }
    template <typename D> WINRT_IMPL_AUTO(float) consume_Windows_UI_Composition_Particles_IParticleGenerator<D>::MaxLifetime() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleGenerator)->get_MaxLifetime(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Windows_UI_Composition_Particles_IParticleGenerator<D>::MaxLifetime(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleGenerator)->put_MaxLifetime(value));
    }
    template <typename D> WINRT_IMPL_AUTO(float) consume_Windows_UI_Composition_Particles_IParticleGenerator<D>::MaxOpacity() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleGenerator)->get_MaxOpacity(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Windows_UI_Composition_Particles_IParticleGenerator<D>::MaxOpacity(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleGenerator)->put_MaxOpacity(value));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Foundation::Numerics::float4) consume_Windows_UI_Composition_Particles_IParticleGenerator<D>::MaxOrientation() const
    {
        winrt::Windows::Foundation::Numerics::float4 value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleGenerator)->get_MaxOrientation(put_abi(value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Windows_UI_Composition_Particles_IParticleGenerator<D>::MaxOrientation(winrt::Windows::Foundation::Numerics::float4 const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleGenerator)->put_MaxOrientation(impl::bind_in(value)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Foundation::Numerics::float3) consume_Windows_UI_Composition_Particles_IParticleGenerator<D>::MaxSize() const
    {
        winrt::Windows::Foundation::Numerics::float3 value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleGenerator)->get_MaxSize(put_abi(value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Windows_UI_Composition_Particles_IParticleGenerator<D>::MaxSize(winrt::Windows::Foundation::Numerics::float3 const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleGenerator)->put_MaxSize(impl::bind_in(value)));
    }
    template <typename D> WINRT_IMPL_AUTO(float) consume_Windows_UI_Composition_Particles_IParticleGenerator<D>::MaxSpeed() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleGenerator)->get_MaxSpeed(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Windows_UI_Composition_Particles_IParticleGenerator<D>::MaxSpeed(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleGenerator)->put_MaxSpeed(value));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::UI::Color) consume_Windows_UI_Composition_Particles_IParticleGenerator<D>::MaxTint() const
    {
        winrt::Windows::UI::Color value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleGenerator)->get_MaxTint(put_abi(value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Windows_UI_Composition_Particles_IParticleGenerator<D>::MaxTint(winrt::Windows::UI::Color const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleGenerator)->put_MaxTint(impl::bind_in(value)));
    }
    template <typename D> WINRT_IMPL_AUTO(float) consume_Windows_UI_Composition_Particles_IParticleGenerator<D>::MinAngularVelocity() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleGenerator)->get_MinAngularVelocity(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Windows_UI_Composition_Particles_IParticleGenerator<D>::MinAngularVelocity(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleGenerator)->put_MinAngularVelocity(value));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Foundation::Numerics::float3) consume_Windows_UI_Composition_Particles_IParticleGenerator<D>::MinDirection() const
    {
        winrt::Windows::Foundation::Numerics::float3 value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleGenerator)->get_MinDirection(put_abi(value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Windows_UI_Composition_Particles_IParticleGenerator<D>::MinDirection(winrt::Windows::Foundation::Numerics::float3 const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleGenerator)->put_MinDirection(impl::bind_in(value)));
    }
    template <typename D> WINRT_IMPL_AUTO(float) consume_Windows_UI_Composition_Particles_IParticleGenerator<D>::MinLifetime() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleGenerator)->get_MinLifetime(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Windows_UI_Composition_Particles_IParticleGenerator<D>::MinLifetime(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleGenerator)->put_MinLifetime(value));
    }
    template <typename D> WINRT_IMPL_AUTO(float) consume_Windows_UI_Composition_Particles_IParticleGenerator<D>::MinOpacity() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleGenerator)->get_MinOpacity(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Windows_UI_Composition_Particles_IParticleGenerator<D>::MinOpacity(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleGenerator)->put_MinOpacity(value));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Foundation::Numerics::float4) consume_Windows_UI_Composition_Particles_IParticleGenerator<D>::MinOrientation() const
    {
        winrt::Windows::Foundation::Numerics::float4 value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleGenerator)->get_MinOrientation(put_abi(value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Windows_UI_Composition_Particles_IParticleGenerator<D>::MinOrientation(winrt::Windows::Foundation::Numerics::float4 const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleGenerator)->put_MinOrientation(impl::bind_in(value)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Foundation::Numerics::float3) consume_Windows_UI_Composition_Particles_IParticleGenerator<D>::MinSize() const
    {
        winrt::Windows::Foundation::Numerics::float3 value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleGenerator)->get_MinSize(put_abi(value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Windows_UI_Composition_Particles_IParticleGenerator<D>::MinSize(winrt::Windows::Foundation::Numerics::float3 const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleGenerator)->put_MinSize(impl::bind_in(value)));
    }
    template <typename D> WINRT_IMPL_AUTO(float) consume_Windows_UI_Composition_Particles_IParticleGenerator<D>::MinSpeed() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleGenerator)->get_MinSpeed(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Windows_UI_Composition_Particles_IParticleGenerator<D>::MinSpeed(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleGenerator)->put_MinSpeed(value));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::UI::Color) consume_Windows_UI_Composition_Particles_IParticleGenerator<D>::MinTint() const
    {
        winrt::Windows::UI::Color value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleGenerator)->get_MinTint(put_abi(value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Windows_UI_Composition_Particles_IParticleGenerator<D>::MinTint(winrt::Windows::UI::Color const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleGenerator)->put_MinTint(impl::bind_in(value)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::UI::Composition::Particles::ParticleScalarBindingCollection) consume_Windows_UI_Composition_Particles_IParticleScalarBehavior<D>::Bindings() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleScalarBehavior)->get_Bindings(&value));
        return winrt::Windows::UI::Composition::Particles::ParticleScalarBindingCollection{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::UI::Composition::Particles::ParticleScalarBehavior) consume_Windows_UI_Composition_Particles_IParticleScalarBehaviorStatics<D>::Create(winrt::Windows::UI::Composition::Compositor const& compositor) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleScalarBehaviorStatics)->Create(*(void**)(&compositor), &result));
        return winrt::Windows::UI::Composition::Particles::ParticleScalarBehavior{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::UI::Composition::Particles::ParticleVector2BindingCollection) consume_Windows_UI_Composition_Particles_IParticleVector2Behavior<D>::Bindings() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleVector2Behavior)->get_Bindings(&value));
        return winrt::Windows::UI::Composition::Particles::ParticleVector2BindingCollection{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::UI::Composition::Particles::ParticleVector2Behavior) consume_Windows_UI_Composition_Particles_IParticleVector2BehaviorStatics<D>::Create(winrt::Windows::UI::Composition::Compositor const& compositor) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleVector2BehaviorStatics)->Create(*(void**)(&compositor), &result));
        return winrt::Windows::UI::Composition::Particles::ParticleVector2Behavior{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::UI::Composition::Particles::ParticleVector3BindingCollection) consume_Windows_UI_Composition_Particles_IParticleVector3Behavior<D>::Bindings() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleVector3Behavior)->get_Bindings(&value));
        return winrt::Windows::UI::Composition::Particles::ParticleVector3BindingCollection{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::UI::Composition::Particles::ParticleVector3Behavior) consume_Windows_UI_Composition_Particles_IParticleVector3BehaviorStatics<D>::Create(winrt::Windows::UI::Composition::Compositor const& compositor) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleVector3BehaviorStatics)->Create(*(void**)(&compositor), &result));
        return winrt::Windows::UI::Composition::Particles::ParticleVector3Behavior{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::UI::Composition::Particles::ParticleVector4BindingCollection) consume_Windows_UI_Composition_Particles_IParticleVector4Behavior<D>::Bindings() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleVector4Behavior)->get_Bindings(&value));
        return winrt::Windows::UI::Composition::Particles::ParticleVector4BindingCollection{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::UI::Composition::Particles::ParticleVector4Behavior) consume_Windows_UI_Composition_Particles_IParticleVector4BehaviorStatics<D>::Create(winrt::Windows::UI::Composition::Compositor const& compositor) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Windows::UI::Composition::Particles::IParticleVector4BehaviorStatics)->Create(*(void**)(&compositor), &result));
        return winrt::Windows::UI::Composition::Particles::ParticleVector4Behavior{ result, take_ownership_from_abi };
    }
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Windows::UI::Composition::Particles::IParticleAttractor> : produce_base<D, winrt::Windows::UI::Composition::Particles::IParticleAttractor>
    {
        int32_t __stdcall get_Offset(winrt::Windows::Foundation::Numerics::float3* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Numerics::float3>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Numerics::float3>(this->shim().Offset());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Offset(winrt::Windows::Foundation::Numerics::float3 value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Offset(*reinterpret_cast<winrt::Windows::Foundation::Numerics::float3 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Radius(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().Radius());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Radius(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Radius(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Strength(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().Strength());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Strength(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Strength(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Windows::UI::Composition::Particles::IParticleAttractorCollection> : produce_base<D, winrt::Windows::UI::Composition::Particles::IParticleAttractorCollection>
    {
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Windows::UI::Composition::Particles::IParticleAttractorStatics> : produce_base<D, winrt::Windows::UI::Composition::Particles::IParticleAttractorStatics>
    {
        int32_t __stdcall Create(void* compositor, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::UI::Composition::Particles::ParticleAttractor>(this->shim().Create(*reinterpret_cast<winrt::Windows::UI::Composition::Compositor const*>(&compositor)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Windows::UI::Composition::Particles::IParticleBaseBehavior> : produce_base<D, winrt::Windows::UI::Composition::Particles::IParticleBaseBehavior>
    {
        int32_t __stdcall get_Input(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::UI::Composition::Particles::ParticleInputSource>(this->shim().Input());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Input(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Input(*reinterpret_cast<winrt::Windows::UI::Composition::Particles::ParticleInputSource const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Windows::UI::Composition::Particles::IParticleBaseBehaviorFactory> : produce_base<D, winrt::Windows::UI::Composition::Particles::IParticleBaseBehaviorFactory>
    {
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Windows::UI::Composition::Particles::IParticleBehaviors> : produce_base<D, winrt::Windows::UI::Composition::Particles::IParticleBehaviors>
    {
        int32_t __stdcall get_AngularVelocity(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::UI::Composition::Particles::ParticleScalarBehavior>(this->shim().AngularVelocity());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_AngularVelocity(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AngularVelocity(*reinterpret_cast<winrt::Windows::UI::Composition::Particles::ParticleScalarBehavior const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Direction(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::UI::Composition::Particles::ParticleVector3Behavior>(this->shim().Direction());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Direction(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Direction(*reinterpret_cast<winrt::Windows::UI::Composition::Particles::ParticleVector3Behavior const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Force(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::UI::Composition::Particles::ParticleVector3Behavior>(this->shim().Force());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Force(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Force(*reinterpret_cast<winrt::Windows::UI::Composition::Particles::ParticleVector3Behavior const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Opacity(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::UI::Composition::Particles::ParticleScalarBehavior>(this->shim().Opacity());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Opacity(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Opacity(*reinterpret_cast<winrt::Windows::UI::Composition::Particles::ParticleScalarBehavior const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Orientation(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::UI::Composition::Particles::ParticleVector4Behavior>(this->shim().Orientation());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Orientation(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Orientation(*reinterpret_cast<winrt::Windows::UI::Composition::Particles::ParticleVector4Behavior const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Position(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::UI::Composition::Particles::ParticleVector3Behavior>(this->shim().Position());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Position(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Position(*reinterpret_cast<winrt::Windows::UI::Composition::Particles::ParticleVector3Behavior const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Scale(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::UI::Composition::Particles::ParticleVector2Behavior>(this->shim().Scale());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Scale(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Scale(*reinterpret_cast<winrt::Windows::UI::Composition::Particles::ParticleVector2Behavior const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Speed(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::UI::Composition::Particles::ParticleScalarBehavior>(this->shim().Speed());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Speed(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Speed(*reinterpret_cast<winrt::Windows::UI::Composition::Particles::ParticleScalarBehavior const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Tint(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::UI::Composition::Particles::ParticleColorBehavior>(this->shim().Tint());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Tint(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Tint(*reinterpret_cast<winrt::Windows::UI::Composition::Particles::ParticleColorBehavior const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Windows::UI::Composition::Particles::IParticleColorBehavior> : produce_base<D, winrt::Windows::UI::Composition::Particles::IParticleColorBehavior>
    {
        int32_t __stdcall get_Bindings(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::UI::Composition::Particles::ParticleColorBindingCollection>(this->shim().Bindings());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Windows::UI::Composition::Particles::IParticleColorBehaviorStatics> : produce_base<D, winrt::Windows::UI::Composition::Particles::IParticleColorBehaviorStatics>
    {
        int32_t __stdcall Create(void* compositor, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::UI::Composition::Particles::ParticleColorBehavior>(this->shim().Create(*reinterpret_cast<winrt::Windows::UI::Composition::Compositor const*>(&compositor)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Windows::UI::Composition::Particles::IParticleColorBindingCollection> : produce_base<D, winrt::Windows::UI::Composition::Particles::IParticleColorBindingCollection>
    {
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Windows::UI::Composition::Particles::IParticleEmitterVisual> : produce_base<D, winrt::Windows::UI::Composition::Particles::IParticleEmitterVisual>
    {
        int32_t __stdcall get_AngularDrag(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().AngularDrag());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_AngularDrag(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AngularDrag(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Attractors(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::UI::Composition::Particles::ParticleAttractorCollection>(this->shim().Attractors());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Brush(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::UI::Composition::CompositionBrush>(this->shim().Brush());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Brush(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Brush(*reinterpret_cast<winrt::Windows::UI::Composition::CompositionBrush const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Drag(winrt::Windows::Foundation::Numerics::float3* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Numerics::float3>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Numerics::float3>(this->shim().Drag());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Drag(winrt::Windows::Foundation::Numerics::float3 value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Drag(*reinterpret_cast<winrt::Windows::Foundation::Numerics::float3 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_EdgeThickness(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().EdgeThickness());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_EdgeThickness(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().EdgeThickness(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_EmitFrom(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::UI::Composition::Particles::ParticleEmitFrom>(this->shim().EmitFrom());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_EmitFrom(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().EmitFrom(*reinterpret_cast<winrt::Windows::UI::Composition::Particles::ParticleEmitFrom const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_EmitterGeometry(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::UI::Composition::CompositionGeometry>(this->shim().EmitterGeometry());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_EmitterGeometry(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().EmitterGeometry(*reinterpret_cast<winrt::Windows::UI::Composition::CompositionGeometry const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_EmitterLifetime(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().EmitterLifetime());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_EmitterViewBox(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::UI::Composition::CompositionViewBox>(this->shim().EmitterViewBox());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_EmitterViewBox(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().EmitterViewBox(*reinterpret_cast<winrt::Windows::UI::Composition::CompositionViewBox const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Force(winrt::Windows::Foundation::Numerics::float3* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Numerics::float3>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Numerics::float3>(this->shim().Force());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Force(winrt::Windows::Foundation::Numerics::float3 value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Force(*reinterpret_cast<winrt::Windows::Foundation::Numerics::float3 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_MaxBurstRateInSeconds(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().MaxBurstRateInSeconds());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_MaxBurstRateInSeconds(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MaxBurstRateInSeconds(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_MaxParticleInstances(uint32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint32_t>(this->shim().MaxParticleInstances());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_MaxParticleInstances(uint32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MaxParticleInstances(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_MaxParticlesPerBurst(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().MaxParticlesPerBurst());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_MaxParticlesPerBurst(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MaxParticlesPerBurst(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_MinBurstRateInSeconds(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().MinBurstRateInSeconds());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_MinBurstRateInSeconds(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MinBurstRateInSeconds(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_MinParticlesPerBurst(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().MinParticlesPerBurst());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_MinParticlesPerBurst(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MinParticlesPerBurst(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ParticleBehaviors(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::UI::Composition::Particles::ParticleBehaviors>(this->shim().ParticleBehaviors());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_ParticleBehaviors(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ParticleBehaviors(*reinterpret_cast<winrt::Windows::UI::Composition::Particles::ParticleBehaviors const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ParticleGenerator(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::UI::Composition::Particles::ParticleGenerator>(this->shim().ParticleGenerator());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_ParticleGenerator(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ParticleGenerator(*reinterpret_cast<winrt::Windows::UI::Composition::Particles::ParticleGenerator const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_TerminalVelocity(winrt::Windows::Foundation::Numerics::float3* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Numerics::float3>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Numerics::float3>(this->shim().TerminalVelocity());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_TerminalVelocity(winrt::Windows::Foundation::Numerics::float3 value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TerminalVelocity(*reinterpret_cast<winrt::Windows::Foundation::Numerics::float3 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Timestep(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().Timestep());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Timestep(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Timestep(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Torque(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().Torque());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Torque(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Torque(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_RandomSeed(uint32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint32_t>(this->shim().RandomSeed());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_RandomSeed(uint32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().RandomSeed(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_SortMode(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::UI::Composition::Particles::ParticleSortMode>(this->shim().SortMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_SortMode(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SortMode(*reinterpret_cast<winrt::Windows::UI::Composition::Particles::ParticleSortMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Clear() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Clear();
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Pause() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Pause();
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Resume() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Resume();
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Start(int64_t lifetime, int64_t preWarmTime, bool loop) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Start(*reinterpret_cast<winrt::Windows::Foundation::TimeSpan const*>(&lifetime), *reinterpret_cast<winrt::Windows::Foundation::TimeSpan const*>(&preWarmTime), loop);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Stop() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Stop();
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Windows::UI::Composition::Particles::IParticleEmitterVisualStatics> : produce_base<D, winrt::Windows::UI::Composition::Particles::IParticleEmitterVisualStatics>
    {
        int32_t __stdcall Create(void* compositor, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::UI::Composition::Particles::ParticleEmitterVisual>(this->shim().Create(*reinterpret_cast<winrt::Windows::UI::Composition::Compositor const*>(&compositor)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Windows::UI::Composition::Particles::IParticleGenerator> : produce_base<D, winrt::Windows::UI::Composition::Particles::IParticleGenerator>
    {
        int32_t __stdcall get_GenerateShortestAngleBetweenDirections(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().GenerateShortestAngleBetweenDirections());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_GenerateShortestAngleBetweenDirections(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().GenerateShortestAngleBetweenDirections(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_GenerateUniformSizes(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().GenerateUniformSizes());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_GenerateUniformSizes(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().GenerateUniformSizes(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_MaxAngularVelocity(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().MaxAngularVelocity());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_MaxAngularVelocity(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MaxAngularVelocity(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_MaxDirection(winrt::Windows::Foundation::Numerics::float3* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Numerics::float3>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Numerics::float3>(this->shim().MaxDirection());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_MaxDirection(winrt::Windows::Foundation::Numerics::float3 value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MaxDirection(*reinterpret_cast<winrt::Windows::Foundation::Numerics::float3 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_MaxLifetime(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().MaxLifetime());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_MaxLifetime(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MaxLifetime(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_MaxOpacity(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().MaxOpacity());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_MaxOpacity(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MaxOpacity(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_MaxOrientation(winrt::Windows::Foundation::Numerics::float4* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Numerics::float4>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Numerics::float4>(this->shim().MaxOrientation());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_MaxOrientation(winrt::Windows::Foundation::Numerics::float4 value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MaxOrientation(*reinterpret_cast<winrt::Windows::Foundation::Numerics::float4 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_MaxSize(winrt::Windows::Foundation::Numerics::float3* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Numerics::float3>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Numerics::float3>(this->shim().MaxSize());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_MaxSize(winrt::Windows::Foundation::Numerics::float3 value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MaxSize(*reinterpret_cast<winrt::Windows::Foundation::Numerics::float3 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_MaxSpeed(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().MaxSpeed());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_MaxSpeed(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MaxSpeed(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_MaxTint(struct struct_Windows_UI_Color* value) noexcept final try
        {
            zero_abi<winrt::Windows::UI::Color>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::UI::Color>(this->shim().MaxTint());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_MaxTint(struct struct_Windows_UI_Color value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MaxTint(*reinterpret_cast<winrt::Windows::UI::Color const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_MinAngularVelocity(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().MinAngularVelocity());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_MinAngularVelocity(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MinAngularVelocity(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_MinDirection(winrt::Windows::Foundation::Numerics::float3* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Numerics::float3>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Numerics::float3>(this->shim().MinDirection());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_MinDirection(winrt::Windows::Foundation::Numerics::float3 value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MinDirection(*reinterpret_cast<winrt::Windows::Foundation::Numerics::float3 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_MinLifetime(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().MinLifetime());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_MinLifetime(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MinLifetime(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_MinOpacity(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().MinOpacity());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_MinOpacity(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MinOpacity(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_MinOrientation(winrt::Windows::Foundation::Numerics::float4* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Numerics::float4>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Numerics::float4>(this->shim().MinOrientation());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_MinOrientation(winrt::Windows::Foundation::Numerics::float4 value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MinOrientation(*reinterpret_cast<winrt::Windows::Foundation::Numerics::float4 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_MinSize(winrt::Windows::Foundation::Numerics::float3* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Numerics::float3>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Numerics::float3>(this->shim().MinSize());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_MinSize(winrt::Windows::Foundation::Numerics::float3 value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MinSize(*reinterpret_cast<winrt::Windows::Foundation::Numerics::float3 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_MinSpeed(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().MinSpeed());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_MinSpeed(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MinSpeed(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_MinTint(struct struct_Windows_UI_Color* value) noexcept final try
        {
            zero_abi<winrt::Windows::UI::Color>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::UI::Color>(this->shim().MinTint());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_MinTint(struct struct_Windows_UI_Color value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MinTint(*reinterpret_cast<winrt::Windows::UI::Color const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Windows::UI::Composition::Particles::IParticleScalarBehavior> : produce_base<D, winrt::Windows::UI::Composition::Particles::IParticleScalarBehavior>
    {
        int32_t __stdcall get_Bindings(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::UI::Composition::Particles::ParticleScalarBindingCollection>(this->shim().Bindings());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Windows::UI::Composition::Particles::IParticleScalarBehaviorStatics> : produce_base<D, winrt::Windows::UI::Composition::Particles::IParticleScalarBehaviorStatics>
    {
        int32_t __stdcall Create(void* compositor, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::UI::Composition::Particles::ParticleScalarBehavior>(this->shim().Create(*reinterpret_cast<winrt::Windows::UI::Composition::Compositor const*>(&compositor)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Windows::UI::Composition::Particles::IParticleScalarBindingCollection> : produce_base<D, winrt::Windows::UI::Composition::Particles::IParticleScalarBindingCollection>
    {
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Windows::UI::Composition::Particles::IParticleVector2Behavior> : produce_base<D, winrt::Windows::UI::Composition::Particles::IParticleVector2Behavior>
    {
        int32_t __stdcall get_Bindings(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::UI::Composition::Particles::ParticleVector2BindingCollection>(this->shim().Bindings());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Windows::UI::Composition::Particles::IParticleVector2BehaviorStatics> : produce_base<D, winrt::Windows::UI::Composition::Particles::IParticleVector2BehaviorStatics>
    {
        int32_t __stdcall Create(void* compositor, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::UI::Composition::Particles::ParticleVector2Behavior>(this->shim().Create(*reinterpret_cast<winrt::Windows::UI::Composition::Compositor const*>(&compositor)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Windows::UI::Composition::Particles::IParticleVector2BindingCollection> : produce_base<D, winrt::Windows::UI::Composition::Particles::IParticleVector2BindingCollection>
    {
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Windows::UI::Composition::Particles::IParticleVector3Behavior> : produce_base<D, winrt::Windows::UI::Composition::Particles::IParticleVector3Behavior>
    {
        int32_t __stdcall get_Bindings(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::UI::Composition::Particles::ParticleVector3BindingCollection>(this->shim().Bindings());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Windows::UI::Composition::Particles::IParticleVector3BehaviorStatics> : produce_base<D, winrt::Windows::UI::Composition::Particles::IParticleVector3BehaviorStatics>
    {
        int32_t __stdcall Create(void* compositor, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::UI::Composition::Particles::ParticleVector3Behavior>(this->shim().Create(*reinterpret_cast<winrt::Windows::UI::Composition::Compositor const*>(&compositor)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Windows::UI::Composition::Particles::IParticleVector3BindingCollection> : produce_base<D, winrt::Windows::UI::Composition::Particles::IParticleVector3BindingCollection>
    {
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Windows::UI::Composition::Particles::IParticleVector4Behavior> : produce_base<D, winrt::Windows::UI::Composition::Particles::IParticleVector4Behavior>
    {
        int32_t __stdcall get_Bindings(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::UI::Composition::Particles::ParticleVector4BindingCollection>(this->shim().Bindings());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Windows::UI::Composition::Particles::IParticleVector4BehaviorStatics> : produce_base<D, winrt::Windows::UI::Composition::Particles::IParticleVector4BehaviorStatics>
    {
        int32_t __stdcall Create(void* compositor, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::UI::Composition::Particles::ParticleVector4Behavior>(this->shim().Create(*reinterpret_cast<winrt::Windows::UI::Composition::Compositor const*>(&compositor)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Windows::UI::Composition::Particles::IParticleVector4BindingCollection> : produce_base<D, winrt::Windows::UI::Composition::Particles::IParticleVector4BindingCollection>
    {
    };
#endif
}
WINRT_EXPORT namespace winrt::Windows::UI::Composition::Particles
{
    inline auto ParticleAttractor::Create(winrt::Windows::UI::Composition::Compositor const& compositor)
    {
        return impl::call_factory<ParticleAttractor, IParticleAttractorStatics>([&](IParticleAttractorStatics const& f) { return f.Create(compositor); });
    }
    inline auto ParticleColorBehavior::Create(winrt::Windows::UI::Composition::Compositor const& compositor)
    {
        return impl::call_factory<ParticleColorBehavior, IParticleColorBehaviorStatics>([&](IParticleColorBehaviorStatics const& f) { return f.Create(compositor); });
    }
    inline auto ParticleEmitterVisual::Create(winrt::Windows::UI::Composition::Compositor const& compositor)
    {
        return impl::call_factory<ParticleEmitterVisual, IParticleEmitterVisualStatics>([&](IParticleEmitterVisualStatics const& f) { return f.Create(compositor); });
    }
    inline auto ParticleScalarBehavior::Create(winrt::Windows::UI::Composition::Compositor const& compositor)
    {
        return impl::call_factory<ParticleScalarBehavior, IParticleScalarBehaviorStatics>([&](IParticleScalarBehaviorStatics const& f) { return f.Create(compositor); });
    }
    inline auto ParticleVector2Behavior::Create(winrt::Windows::UI::Composition::Compositor const& compositor)
    {
        return impl::call_factory<ParticleVector2Behavior, IParticleVector2BehaviorStatics>([&](IParticleVector2BehaviorStatics const& f) { return f.Create(compositor); });
    }
    inline auto ParticleVector3Behavior::Create(winrt::Windows::UI::Composition::Compositor const& compositor)
    {
        return impl::call_factory<ParticleVector3Behavior, IParticleVector3BehaviorStatics>([&](IParticleVector3BehaviorStatics const& f) { return f.Create(compositor); });
    }
    inline auto ParticleVector4Behavior::Create(winrt::Windows::UI::Composition::Compositor const& compositor)
    {
        return impl::call_factory<ParticleVector4Behavior, IParticleVector4BehaviorStatics>([&](IParticleVector4BehaviorStatics const& f) { return f.Create(compositor); });
    }
}
namespace std
{
#ifndef WINRT_LEAN_AND_MEAN
    template<> struct hash<winrt::Windows::UI::Composition::Particles::IParticleAttractor> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Windows::UI::Composition::Particles::IParticleAttractorCollection> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Windows::UI::Composition::Particles::IParticleAttractorStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Windows::UI::Composition::Particles::IParticleBaseBehavior> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Windows::UI::Composition::Particles::IParticleBaseBehaviorFactory> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Windows::UI::Composition::Particles::IParticleBehaviors> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Windows::UI::Composition::Particles::IParticleColorBehavior> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Windows::UI::Composition::Particles::IParticleColorBehaviorStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Windows::UI::Composition::Particles::IParticleColorBindingCollection> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Windows::UI::Composition::Particles::IParticleEmitterVisual> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Windows::UI::Composition::Particles::IParticleEmitterVisualStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Windows::UI::Composition::Particles::IParticleGenerator> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Windows::UI::Composition::Particles::IParticleScalarBehavior> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Windows::UI::Composition::Particles::IParticleScalarBehaviorStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Windows::UI::Composition::Particles::IParticleScalarBindingCollection> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Windows::UI::Composition::Particles::IParticleVector2Behavior> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Windows::UI::Composition::Particles::IParticleVector2BehaviorStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Windows::UI::Composition::Particles::IParticleVector2BindingCollection> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Windows::UI::Composition::Particles::IParticleVector3Behavior> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Windows::UI::Composition::Particles::IParticleVector3BehaviorStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Windows::UI::Composition::Particles::IParticleVector3BindingCollection> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Windows::UI::Composition::Particles::IParticleVector4Behavior> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Windows::UI::Composition::Particles::IParticleVector4BehaviorStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Windows::UI::Composition::Particles::IParticleVector4BindingCollection> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Windows::UI::Composition::Particles::ParticleAttractor> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Windows::UI::Composition::Particles::ParticleAttractorCollection> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Windows::UI::Composition::Particles::ParticleBaseBehavior> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Windows::UI::Composition::Particles::ParticleBehaviors> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Windows::UI::Composition::Particles::ParticleColorBehavior> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Windows::UI::Composition::Particles::ParticleColorBindingCollection> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Windows::UI::Composition::Particles::ParticleEmitterVisual> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Windows::UI::Composition::Particles::ParticleGenerator> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Windows::UI::Composition::Particles::ParticleScalarBehavior> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Windows::UI::Composition::Particles::ParticleScalarBindingCollection> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Windows::UI::Composition::Particles::ParticleVector2Behavior> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Windows::UI::Composition::Particles::ParticleVector2BindingCollection> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Windows::UI::Composition::Particles::ParticleVector3Behavior> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Windows::UI::Composition::Particles::ParticleVector3BindingCollection> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Windows::UI::Composition::Particles::ParticleVector4Behavior> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Windows::UI::Composition::Particles::ParticleVector4BindingCollection> : winrt::impl::hash_base {};
#endif
}
#endif
