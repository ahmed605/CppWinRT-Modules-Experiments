// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.210806.1

#pragma once
#ifndef WINRT_Windows_UI_Composition_Particles_0_H
#define WINRT_Windows_UI_Composition_Particles_0_H
WINRT_EXPORT namespace winrt::Windows::Foundation
{
}
WINRT_EXPORT namespace winrt::Windows::Foundation::Collections
{
    template <typename T> struct __declspec(empty_bases) IVector;
}
WINRT_EXPORT namespace winrt::Windows::Foundation::Numerics
{
}
WINRT_EXPORT namespace winrt::Windows::UI
{
    struct Color;
}
WINRT_EXPORT namespace winrt::Windows::UI::Composition
{
    struct CompositionBrush;
    struct CompositionGeometry;
    struct CompositionViewBox;
    struct Compositor;
}
WINRT_EXPORT namespace winrt::Windows::UI::Composition::Particles
{
    enum class ParticleEmitFrom : int32_t
    {
        Edge = 0,
        Area = 1,
    };
    enum class ParticleInputSource : int32_t
    {
        Lifetime = 0,
        Speed = 1,
        AngularSpeed = 2,
        Opacity = 3,
        XPos = 4,
        YPos = 5,
        ZPos = 6,
    };
    enum class ParticleReferenceFrame : int32_t
    {
        Absolute = 0,
        Initial = 1,
        Current = 2,
    };
    enum class ParticleSortMode : int32_t
    {
        None = 0,
        Distance = 1,
        YoungestInFront = 2,
        OldestInFront = 3,
    };
    struct IParticleAttractor;
    struct IParticleAttractorCollection;
    struct IParticleAttractorStatics;
    struct IParticleBaseBehavior;
    struct IParticleBaseBehaviorFactory;
    struct IParticleBehaviors;
    struct IParticleColorBehavior;
    struct IParticleColorBehaviorStatics;
    struct IParticleColorBindingCollection;
    struct IParticleEmitterVisual;
    struct IParticleEmitterVisualStatics;
    struct IParticleGenerator;
    struct IParticleScalarBehavior;
    struct IParticleScalarBehaviorStatics;
    struct IParticleScalarBindingCollection;
    struct IParticleVector2Behavior;
    struct IParticleVector2BehaviorStatics;
    struct IParticleVector2BindingCollection;
    struct IParticleVector3Behavior;
    struct IParticleVector3BehaviorStatics;
    struct IParticleVector3BindingCollection;
    struct IParticleVector4Behavior;
    struct IParticleVector4BehaviorStatics;
    struct IParticleVector4BindingCollection;
    struct ParticleAttractor;
    struct ParticleAttractorCollection;
    struct ParticleBaseBehavior;
    struct ParticleBehaviors;
    struct ParticleColorBehavior;
    struct ParticleColorBindingCollection;
    struct ParticleEmitterVisual;
    struct ParticleGenerator;
    struct ParticleScalarBehavior;
    struct ParticleScalarBindingCollection;
    struct ParticleVector2Behavior;
    struct ParticleVector2BindingCollection;
    struct ParticleVector3Behavior;
    struct ParticleVector3BindingCollection;
    struct ParticleVector4Behavior;
    struct ParticleVector4BindingCollection;
    struct ParticleColorBinding;
    struct ParticleScalarBinding;
    struct ParticleVector2Binding;
    struct ParticleVector3Binding;
    struct ParticleVector4Binding;
}
namespace winrt::impl
{
    template <> struct category<winrt::Windows::UI::Composition::Particles::IParticleAttractor>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Composition::Particles::IParticleAttractorCollection>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Composition::Particles::IParticleAttractorStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Composition::Particles::IParticleBaseBehavior>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Composition::Particles::IParticleBaseBehaviorFactory>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Composition::Particles::IParticleBehaviors>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Composition::Particles::IParticleColorBehavior>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Composition::Particles::IParticleColorBehaviorStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Composition::Particles::IParticleColorBindingCollection>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Composition::Particles::IParticleEmitterVisual>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Composition::Particles::IParticleEmitterVisualStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Composition::Particles::IParticleGenerator>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Composition::Particles::IParticleScalarBehavior>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Composition::Particles::IParticleScalarBehaviorStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Composition::Particles::IParticleScalarBindingCollection>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Composition::Particles::IParticleVector2Behavior>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Composition::Particles::IParticleVector2BehaviorStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Composition::Particles::IParticleVector2BindingCollection>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Composition::Particles::IParticleVector3Behavior>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Composition::Particles::IParticleVector3BehaviorStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Composition::Particles::IParticleVector3BindingCollection>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Composition::Particles::IParticleVector4Behavior>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Composition::Particles::IParticleVector4BehaviorStatics>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Composition::Particles::IParticleVector4BindingCollection>{ using type = interface_category; };
    template <> struct category<winrt::Windows::UI::Composition::Particles::ParticleAttractor>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Composition::Particles::ParticleAttractorCollection>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Composition::Particles::ParticleBaseBehavior>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Composition::Particles::ParticleBehaviors>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Composition::Particles::ParticleColorBehavior>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Composition::Particles::ParticleColorBindingCollection>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Composition::Particles::ParticleEmitterVisual>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Composition::Particles::ParticleGenerator>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Composition::Particles::ParticleScalarBehavior>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Composition::Particles::ParticleScalarBindingCollection>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Composition::Particles::ParticleVector2Behavior>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Composition::Particles::ParticleVector2BindingCollection>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Composition::Particles::ParticleVector3Behavior>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Composition::Particles::ParticleVector3BindingCollection>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Composition::Particles::ParticleVector4Behavior>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Composition::Particles::ParticleVector4BindingCollection>{ using type = class_category; };
    template <> struct category<winrt::Windows::UI::Composition::Particles::ParticleEmitFrom>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Composition::Particles::ParticleInputSource>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Composition::Particles::ParticleReferenceFrame>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Composition::Particles::ParticleSortMode>{ using type = enum_category; };
    template <> struct category<winrt::Windows::UI::Composition::Particles::ParticleColorBinding>{ using type = struct_category<winrt::Windows::UI::Composition::Particles::ParticleReferenceFrame, winrt::Windows::Foundation::Numerics::float3>; };
    template <> struct category<winrt::Windows::UI::Composition::Particles::ParticleScalarBinding>{ using type = struct_category<winrt::Windows::UI::Composition::Particles::ParticleReferenceFrame, float>; };
    template <> struct category<winrt::Windows::UI::Composition::Particles::ParticleVector2Binding>{ using type = struct_category<winrt::Windows::UI::Composition::Particles::ParticleReferenceFrame, winrt::Windows::Foundation::Numerics::float2>; };
    template <> struct category<winrt::Windows::UI::Composition::Particles::ParticleVector3Binding>{ using type = struct_category<winrt::Windows::UI::Composition::Particles::ParticleReferenceFrame, winrt::Windows::Foundation::Numerics::float3>; };
    template <> struct category<winrt::Windows::UI::Composition::Particles::ParticleVector4Binding>{ using type = struct_category<winrt::Windows::UI::Composition::Particles::ParticleReferenceFrame, winrt::Windows::Foundation::Numerics::float4>; };
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Composition::Particles::ParticleAttractor> = L"Windows.UI.Composition.Particles.ParticleAttractor";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Composition::Particles::ParticleAttractorCollection> = L"Windows.UI.Composition.Particles.ParticleAttractorCollection";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Composition::Particles::ParticleBaseBehavior> = L"Windows.UI.Composition.Particles.ParticleBaseBehavior";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Composition::Particles::ParticleBehaviors> = L"Windows.UI.Composition.Particles.ParticleBehaviors";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Composition::Particles::ParticleColorBehavior> = L"Windows.UI.Composition.Particles.ParticleColorBehavior";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Composition::Particles::ParticleColorBindingCollection> = L"Windows.UI.Composition.Particles.ParticleColorBindingCollection";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Composition::Particles::ParticleEmitterVisual> = L"Windows.UI.Composition.Particles.ParticleEmitterVisual";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Composition::Particles::ParticleGenerator> = L"Windows.UI.Composition.Particles.ParticleGenerator";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Composition::Particles::ParticleScalarBehavior> = L"Windows.UI.Composition.Particles.ParticleScalarBehavior";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Composition::Particles::ParticleScalarBindingCollection> = L"Windows.UI.Composition.Particles.ParticleScalarBindingCollection";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Composition::Particles::ParticleVector2Behavior> = L"Windows.UI.Composition.Particles.ParticleVector2Behavior";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Composition::Particles::ParticleVector2BindingCollection> = L"Windows.UI.Composition.Particles.ParticleVector2BindingCollection";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Composition::Particles::ParticleVector3Behavior> = L"Windows.UI.Composition.Particles.ParticleVector3Behavior";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Composition::Particles::ParticleVector3BindingCollection> = L"Windows.UI.Composition.Particles.ParticleVector3BindingCollection";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Composition::Particles::ParticleVector4Behavior> = L"Windows.UI.Composition.Particles.ParticleVector4Behavior";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Composition::Particles::ParticleVector4BindingCollection> = L"Windows.UI.Composition.Particles.ParticleVector4BindingCollection";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Composition::Particles::ParticleEmitFrom> = L"Windows.UI.Composition.Particles.ParticleEmitFrom";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Composition::Particles::ParticleInputSource> = L"Windows.UI.Composition.Particles.ParticleInputSource";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Composition::Particles::ParticleReferenceFrame> = L"Windows.UI.Composition.Particles.ParticleReferenceFrame";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Composition::Particles::ParticleSortMode> = L"Windows.UI.Composition.Particles.ParticleSortMode";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Composition::Particles::ParticleColorBinding> = L"Windows.UI.Composition.Particles.ParticleColorBinding";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Composition::Particles::ParticleScalarBinding> = L"Windows.UI.Composition.Particles.ParticleScalarBinding";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Composition::Particles::ParticleVector2Binding> = L"Windows.UI.Composition.Particles.ParticleVector2Binding";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Composition::Particles::ParticleVector3Binding> = L"Windows.UI.Composition.Particles.ParticleVector3Binding";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Composition::Particles::ParticleVector4Binding> = L"Windows.UI.Composition.Particles.ParticleVector4Binding";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Composition::Particles::IParticleAttractor> = L"Windows.UI.Composition.Particles.IParticleAttractor";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Composition::Particles::IParticleAttractorCollection> = L"Windows.UI.Composition.Particles.IParticleAttractorCollection";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Composition::Particles::IParticleAttractorStatics> = L"Windows.UI.Composition.Particles.IParticleAttractorStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Composition::Particles::IParticleBaseBehavior> = L"Windows.UI.Composition.Particles.IParticleBaseBehavior";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Composition::Particles::IParticleBaseBehaviorFactory> = L"Windows.UI.Composition.Particles.IParticleBaseBehaviorFactory";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Composition::Particles::IParticleBehaviors> = L"Windows.UI.Composition.Particles.IParticleBehaviors";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Composition::Particles::IParticleColorBehavior> = L"Windows.UI.Composition.Particles.IParticleColorBehavior";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Composition::Particles::IParticleColorBehaviorStatics> = L"Windows.UI.Composition.Particles.IParticleColorBehaviorStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Composition::Particles::IParticleColorBindingCollection> = L"Windows.UI.Composition.Particles.IParticleColorBindingCollection";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Composition::Particles::IParticleEmitterVisual> = L"Windows.UI.Composition.Particles.IParticleEmitterVisual";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Composition::Particles::IParticleEmitterVisualStatics> = L"Windows.UI.Composition.Particles.IParticleEmitterVisualStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Composition::Particles::IParticleGenerator> = L"Windows.UI.Composition.Particles.IParticleGenerator";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Composition::Particles::IParticleScalarBehavior> = L"Windows.UI.Composition.Particles.IParticleScalarBehavior";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Composition::Particles::IParticleScalarBehaviorStatics> = L"Windows.UI.Composition.Particles.IParticleScalarBehaviorStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Composition::Particles::IParticleScalarBindingCollection> = L"Windows.UI.Composition.Particles.IParticleScalarBindingCollection";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Composition::Particles::IParticleVector2Behavior> = L"Windows.UI.Composition.Particles.IParticleVector2Behavior";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Composition::Particles::IParticleVector2BehaviorStatics> = L"Windows.UI.Composition.Particles.IParticleVector2BehaviorStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Composition::Particles::IParticleVector2BindingCollection> = L"Windows.UI.Composition.Particles.IParticleVector2BindingCollection";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Composition::Particles::IParticleVector3Behavior> = L"Windows.UI.Composition.Particles.IParticleVector3Behavior";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Composition::Particles::IParticleVector3BehaviorStatics> = L"Windows.UI.Composition.Particles.IParticleVector3BehaviorStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Composition::Particles::IParticleVector3BindingCollection> = L"Windows.UI.Composition.Particles.IParticleVector3BindingCollection";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Composition::Particles::IParticleVector4Behavior> = L"Windows.UI.Composition.Particles.IParticleVector4Behavior";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Composition::Particles::IParticleVector4BehaviorStatics> = L"Windows.UI.Composition.Particles.IParticleVector4BehaviorStatics";
    template <> inline constexpr auto& name_v<winrt::Windows::UI::Composition::Particles::IParticleVector4BindingCollection> = L"Windows.UI.Composition.Particles.IParticleVector4BindingCollection";
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Composition::Particles::IParticleAttractor>{ 0xCD5F5D42,0xED50,0x5230,{ 0xAA,0xC2,0x21,0xDE,0xF2,0x82,0x5F,0x7C } }; // CD5F5D42-ED50-5230-AAC2-21DEF2825F7C
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Composition::Particles::IParticleAttractorCollection>{ 0x821A0DAE,0x2F82,0x55D3,{ 0x85,0x7E,0xC3,0xF9,0xAD,0x27,0x0C,0xD4 } }; // 821A0DAE-2F82-55D3-857E-C3F9AD270CD4
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Composition::Particles::IParticleAttractorStatics>{ 0x9DCBB84C,0x5B9F,0x58CA,{ 0xAA,0x45,0xA9,0x56,0x24,0x15,0x84,0x39 } }; // 9DCBB84C-5B9F-58CA-AA45-A95624158439
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Composition::Particles::IParticleBaseBehavior>{ 0xF6A896CC,0x8D3A,0x5519,{ 0xB5,0x8A,0x8A,0x94,0xD3,0x0D,0x02,0x49 } }; // F6A896CC-8D3A-5519-B58A-8A94D30D0249
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Composition::Particles::IParticleBaseBehaviorFactory>{ 0xCE3E0287,0xAF71,0x5230,{ 0x81,0x14,0x2B,0xD2,0x55,0x7B,0xC6,0x26 } }; // CE3E0287-AF71-5230-8114-2BD2557BC626
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Composition::Particles::IParticleBehaviors>{ 0x818E3719,0x6755,0x58DB,{ 0xB3,0xF6,0xAA,0x22,0xDA,0x9C,0x8D,0x5A } }; // 818E3719-6755-58DB-B3F6-AA22DA9C8D5A
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Composition::Particles::IParticleColorBehavior>{ 0x1E89D650,0xD6CF,0x5D17,{ 0xB5,0x73,0x42,0x1C,0x8D,0xD7,0x9D,0xFA } }; // 1E89D650-D6CF-5D17-B573-421C8DD79DFA
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Composition::Particles::IParticleColorBehaviorStatics>{ 0x0B81F2E9,0xAE72,0x524D,{ 0x86,0x9C,0x29,0x5C,0xA6,0x40,0x6E,0x82 } }; // 0B81F2E9-AE72-524D-869C-295CA6406E82
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Composition::Particles::IParticleColorBindingCollection>{ 0x44C92A29,0x24C7,0x51D8,{ 0xAE,0x95,0x3B,0x95,0x4B,0x32,0xCE,0x74 } }; // 44C92A29-24C7-51D8-AE95-3B954B32CE74
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Composition::Particles::IParticleEmitterVisual>{ 0x8DA5D5CF,0xCB4B,0x52A3,{ 0xB7,0x3B,0xBE,0xDE,0x2D,0x09,0x79,0xBA } }; // 8DA5D5CF-CB4B-52A3-B73B-BEDE2D0979BA
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Composition::Particles::IParticleEmitterVisualStatics>{ 0x56B9F391,0x462F,0x50B2,{ 0x9D,0xC7,0x86,0xE3,0x65,0xDE,0x55,0xD3 } }; // 56B9F391-462F-50B2-9DC7-86E365DE55D3
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Composition::Particles::IParticleGenerator>{ 0x95FF2813,0x5E7E,0x596F,{ 0xAC,0x50,0x95,0x37,0x60,0x10,0x4A,0x07 } }; // 95FF2813-5E7E-596F-AC50-953760104A07
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Composition::Particles::IParticleScalarBehavior>{ 0xD4AF2724,0x566F,0x4418,{ 0x90,0x53,0xA8,0xCF,0x28,0x97,0x53,0x76 } }; // D4AF2724-566F-4418-9053-A8CF28975376
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Composition::Particles::IParticleScalarBehaviorStatics>{ 0x5BF9FD05,0x1D88,0x46F1,{ 0xA1,0x65,0x7F,0x83,0x44,0x84,0xE5,0xED } }; // 5BF9FD05-1D88-46F1-A165-7F834484E5ED
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Composition::Particles::IParticleScalarBindingCollection>{ 0x278DC9F3,0xC5F5,0x4A99,{ 0x93,0xE8,0x75,0x68,0x70,0x25,0xFF,0x3F } }; // 278DC9F3-C5F5-4A99-93E8-75687025FF3F
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Composition::Particles::IParticleVector2Behavior>{ 0x74A5C1D7,0xAA30,0x5CFC,{ 0x94,0xC6,0x3B,0xDE,0xBC,0xFF,0x19,0xC1 } }; // 74A5C1D7-AA30-5CFC-94C6-3BDEBCFF19C1
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Composition::Particles::IParticleVector2BehaviorStatics>{ 0x3B180568,0xFE36,0x5616,{ 0xA0,0x71,0x93,0xF5,0x24,0x2F,0x9E,0x82 } }; // 3B180568-FE36-5616-A071-93F5242F9E82
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Composition::Particles::IParticleVector2BindingCollection>{ 0x9C3F93CE,0xB683,0x5142,{ 0x8C,0x06,0xCA,0xAF,0xBA,0xF6,0xE9,0xD5 } }; // 9C3F93CE-B683-5142-8C06-CAAFBAF6E9D5
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Composition::Particles::IParticleVector3Behavior>{ 0x26F104DE,0x1F2E,0x5CD5,{ 0xA4,0x89,0xEF,0xB1,0xE6,0x38,0x87,0x1C } }; // 26F104DE-1F2E-5CD5-A489-EFB1E638871C
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Composition::Particles::IParticleVector3BehaviorStatics>{ 0x358268D3,0xCB2F,0x5FD5,{ 0x93,0xB5,0xA0,0x77,0xEE,0xCC,0xA9,0x88 } }; // 358268D3-CB2F-5FD5-93B5-A077EECCA988
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Composition::Particles::IParticleVector3BindingCollection>{ 0x848AD839,0x5B4D,0x514F,{ 0x80,0x83,0x03,0xAA,0x29,0x1E,0x29,0xA5 } }; // 848AD839-5B4D-514F-8083-03AA291E29A5
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Composition::Particles::IParticleVector4Behavior>{ 0x844ED5C3,0x22A4,0x551A,{ 0x95,0xE6,0xFC,0xD1,0xB7,0xBA,0x1F,0x01 } }; // 844ED5C3-22A4-551A-95E6-FCD1B7BA1F01
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Composition::Particles::IParticleVector4BehaviorStatics>{ 0x2AAB6C2B,0xBFC7,0x53FE,{ 0xB3,0xB2,0xB6,0xEF,0xE2,0x91,0xD1,0xD1 } }; // 2AAB6C2B-BFC7-53FE-B3B2-B6EFE291D1D1
    template <> inline constexpr guid guid_v<winrt::Windows::UI::Composition::Particles::IParticleVector4BindingCollection>{ 0x9C5AF21F,0xA5F7,0x5831,{ 0xA6,0x7D,0x05,0xF3,0x53,0x11,0x71,0x45 } }; // 9C5AF21F-A5F7-5831-A67D-05F353117145
    template <> struct default_interface<winrt::Windows::UI::Composition::Particles::ParticleAttractor>{ using type = winrt::Windows::UI::Composition::Particles::IParticleAttractor; };
    template <> struct default_interface<winrt::Windows::UI::Composition::Particles::ParticleAttractorCollection>{ using type = winrt::Windows::Foundation::Collections::IVector<winrt::Windows::UI::Composition::Particles::ParticleAttractor>; };
    template <> struct default_interface<winrt::Windows::UI::Composition::Particles::ParticleBaseBehavior>{ using type = winrt::Windows::UI::Composition::Particles::IParticleBaseBehavior; };
    template <> struct default_interface<winrt::Windows::UI::Composition::Particles::ParticleBehaviors>{ using type = winrt::Windows::UI::Composition::Particles::IParticleBehaviors; };
    template <> struct default_interface<winrt::Windows::UI::Composition::Particles::ParticleColorBehavior>{ using type = winrt::Windows::UI::Composition::Particles::IParticleColorBehavior; };
    template <> struct default_interface<winrt::Windows::UI::Composition::Particles::ParticleColorBindingCollection>{ using type = winrt::Windows::UI::Composition::Particles::IParticleColorBindingCollection; };
    template <> struct default_interface<winrt::Windows::UI::Composition::Particles::ParticleEmitterVisual>{ using type = winrt::Windows::UI::Composition::Particles::IParticleEmitterVisual; };
    template <> struct default_interface<winrt::Windows::UI::Composition::Particles::ParticleGenerator>{ using type = winrt::Windows::UI::Composition::Particles::IParticleGenerator; };
    template <> struct default_interface<winrt::Windows::UI::Composition::Particles::ParticleScalarBehavior>{ using type = winrt::Windows::UI::Composition::Particles::IParticleScalarBehavior; };
    template <> struct default_interface<winrt::Windows::UI::Composition::Particles::ParticleScalarBindingCollection>{ using type = winrt::Windows::UI::Composition::Particles::IParticleScalarBindingCollection; };
    template <> struct default_interface<winrt::Windows::UI::Composition::Particles::ParticleVector2Behavior>{ using type = winrt::Windows::UI::Composition::Particles::IParticleVector2Behavior; };
    template <> struct default_interface<winrt::Windows::UI::Composition::Particles::ParticleVector2BindingCollection>{ using type = winrt::Windows::UI::Composition::Particles::IParticleVector2BindingCollection; };
    template <> struct default_interface<winrt::Windows::UI::Composition::Particles::ParticleVector3Behavior>{ using type = winrt::Windows::UI::Composition::Particles::IParticleVector3Behavior; };
    template <> struct default_interface<winrt::Windows::UI::Composition::Particles::ParticleVector3BindingCollection>{ using type = winrt::Windows::UI::Composition::Particles::IParticleVector3BindingCollection; };
    template <> struct default_interface<winrt::Windows::UI::Composition::Particles::ParticleVector4Behavior>{ using type = winrt::Windows::UI::Composition::Particles::IParticleVector4Behavior; };
    template <> struct default_interface<winrt::Windows::UI::Composition::Particles::ParticleVector4BindingCollection>{ using type = winrt::Windows::UI::Composition::Particles::IParticleVector4BindingCollection; };
    template <> struct abi<winrt::Windows::UI::Composition::Particles::IParticleAttractor>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Offset(winrt::Windows::Foundation::Numerics::float3*) noexcept = 0;
            virtual int32_t __stdcall put_Offset(winrt::Windows::Foundation::Numerics::float3) noexcept = 0;
            virtual int32_t __stdcall get_Radius(float*) noexcept = 0;
            virtual int32_t __stdcall put_Radius(float) noexcept = 0;
            virtual int32_t __stdcall get_Strength(float*) noexcept = 0;
            virtual int32_t __stdcall put_Strength(float) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Composition::Particles::IParticleAttractorCollection>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Composition::Particles::IParticleAttractorStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Create(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Composition::Particles::IParticleBaseBehavior>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Input(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Input(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Composition::Particles::IParticleBaseBehaviorFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Composition::Particles::IParticleBehaviors>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_AngularVelocity(void**) noexcept = 0;
            virtual int32_t __stdcall put_AngularVelocity(void*) noexcept = 0;
            virtual int32_t __stdcall get_Direction(void**) noexcept = 0;
            virtual int32_t __stdcall put_Direction(void*) noexcept = 0;
            virtual int32_t __stdcall get_Force(void**) noexcept = 0;
            virtual int32_t __stdcall put_Force(void*) noexcept = 0;
            virtual int32_t __stdcall get_Opacity(void**) noexcept = 0;
            virtual int32_t __stdcall put_Opacity(void*) noexcept = 0;
            virtual int32_t __stdcall get_Orientation(void**) noexcept = 0;
            virtual int32_t __stdcall put_Orientation(void*) noexcept = 0;
            virtual int32_t __stdcall get_Position(void**) noexcept = 0;
            virtual int32_t __stdcall put_Position(void*) noexcept = 0;
            virtual int32_t __stdcall get_Scale(void**) noexcept = 0;
            virtual int32_t __stdcall put_Scale(void*) noexcept = 0;
            virtual int32_t __stdcall get_Speed(void**) noexcept = 0;
            virtual int32_t __stdcall put_Speed(void*) noexcept = 0;
            virtual int32_t __stdcall get_Tint(void**) noexcept = 0;
            virtual int32_t __stdcall put_Tint(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Composition::Particles::IParticleColorBehavior>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Bindings(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Composition::Particles::IParticleColorBehaviorStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Create(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Composition::Particles::IParticleColorBindingCollection>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Composition::Particles::IParticleEmitterVisual>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_AngularDrag(float*) noexcept = 0;
            virtual int32_t __stdcall put_AngularDrag(float) noexcept = 0;
            virtual int32_t __stdcall get_Attractors(void**) noexcept = 0;
            virtual int32_t __stdcall get_Brush(void**) noexcept = 0;
            virtual int32_t __stdcall put_Brush(void*) noexcept = 0;
            virtual int32_t __stdcall get_Drag(winrt::Windows::Foundation::Numerics::float3*) noexcept = 0;
            virtual int32_t __stdcall put_Drag(winrt::Windows::Foundation::Numerics::float3) noexcept = 0;
            virtual int32_t __stdcall get_EdgeThickness(float*) noexcept = 0;
            virtual int32_t __stdcall put_EdgeThickness(float) noexcept = 0;
            virtual int32_t __stdcall get_EmitFrom(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_EmitFrom(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_EmitterGeometry(void**) noexcept = 0;
            virtual int32_t __stdcall put_EmitterGeometry(void*) noexcept = 0;
            virtual int32_t __stdcall get_EmitterLifetime(float*) noexcept = 0;
            virtual int32_t __stdcall get_EmitterViewBox(void**) noexcept = 0;
            virtual int32_t __stdcall put_EmitterViewBox(void*) noexcept = 0;
            virtual int32_t __stdcall get_Force(winrt::Windows::Foundation::Numerics::float3*) noexcept = 0;
            virtual int32_t __stdcall put_Force(winrt::Windows::Foundation::Numerics::float3) noexcept = 0;
            virtual int32_t __stdcall get_MaxBurstRateInSeconds(float*) noexcept = 0;
            virtual int32_t __stdcall put_MaxBurstRateInSeconds(float) noexcept = 0;
            virtual int32_t __stdcall get_MaxParticleInstances(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MaxParticleInstances(uint32_t) noexcept = 0;
            virtual int32_t __stdcall get_MaxParticlesPerBurst(float*) noexcept = 0;
            virtual int32_t __stdcall put_MaxParticlesPerBurst(float) noexcept = 0;
            virtual int32_t __stdcall get_MinBurstRateInSeconds(float*) noexcept = 0;
            virtual int32_t __stdcall put_MinBurstRateInSeconds(float) noexcept = 0;
            virtual int32_t __stdcall get_MinParticlesPerBurst(float*) noexcept = 0;
            virtual int32_t __stdcall put_MinParticlesPerBurst(float) noexcept = 0;
            virtual int32_t __stdcall get_ParticleBehaviors(void**) noexcept = 0;
            virtual int32_t __stdcall put_ParticleBehaviors(void*) noexcept = 0;
            virtual int32_t __stdcall get_ParticleGenerator(void**) noexcept = 0;
            virtual int32_t __stdcall put_ParticleGenerator(void*) noexcept = 0;
            virtual int32_t __stdcall get_TerminalVelocity(winrt::Windows::Foundation::Numerics::float3*) noexcept = 0;
            virtual int32_t __stdcall put_TerminalVelocity(winrt::Windows::Foundation::Numerics::float3) noexcept = 0;
            virtual int32_t __stdcall get_Timestep(float*) noexcept = 0;
            virtual int32_t __stdcall put_Timestep(float) noexcept = 0;
            virtual int32_t __stdcall get_Torque(float*) noexcept = 0;
            virtual int32_t __stdcall put_Torque(float) noexcept = 0;
            virtual int32_t __stdcall get_RandomSeed(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall put_RandomSeed(uint32_t) noexcept = 0;
            virtual int32_t __stdcall get_SortMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_SortMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall Clear() noexcept = 0;
            virtual int32_t __stdcall Pause() noexcept = 0;
            virtual int32_t __stdcall Resume() noexcept = 0;
            virtual int32_t __stdcall Start(int64_t, int64_t, bool) noexcept = 0;
            virtual int32_t __stdcall Stop() noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Composition::Particles::IParticleEmitterVisualStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Create(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Composition::Particles::IParticleGenerator>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_GenerateShortestAngleBetweenDirections(bool*) noexcept = 0;
            virtual int32_t __stdcall put_GenerateShortestAngleBetweenDirections(bool) noexcept = 0;
            virtual int32_t __stdcall get_GenerateUniformSizes(bool*) noexcept = 0;
            virtual int32_t __stdcall put_GenerateUniformSizes(bool) noexcept = 0;
            virtual int32_t __stdcall get_MaxAngularVelocity(float*) noexcept = 0;
            virtual int32_t __stdcall put_MaxAngularVelocity(float) noexcept = 0;
            virtual int32_t __stdcall get_MaxDirection(winrt::Windows::Foundation::Numerics::float3*) noexcept = 0;
            virtual int32_t __stdcall put_MaxDirection(winrt::Windows::Foundation::Numerics::float3) noexcept = 0;
            virtual int32_t __stdcall get_MaxLifetime(float*) noexcept = 0;
            virtual int32_t __stdcall put_MaxLifetime(float) noexcept = 0;
            virtual int32_t __stdcall get_MaxOpacity(float*) noexcept = 0;
            virtual int32_t __stdcall put_MaxOpacity(float) noexcept = 0;
            virtual int32_t __stdcall get_MaxOrientation(winrt::Windows::Foundation::Numerics::float4*) noexcept = 0;
            virtual int32_t __stdcall put_MaxOrientation(winrt::Windows::Foundation::Numerics::float4) noexcept = 0;
            virtual int32_t __stdcall get_MaxSize(winrt::Windows::Foundation::Numerics::float3*) noexcept = 0;
            virtual int32_t __stdcall put_MaxSize(winrt::Windows::Foundation::Numerics::float3) noexcept = 0;
            virtual int32_t __stdcall get_MaxSpeed(float*) noexcept = 0;
            virtual int32_t __stdcall put_MaxSpeed(float) noexcept = 0;
            virtual int32_t __stdcall get_MaxTint(struct struct_Windows_UI_Color*) noexcept = 0;
            virtual int32_t __stdcall put_MaxTint(struct struct_Windows_UI_Color) noexcept = 0;
            virtual int32_t __stdcall get_MinAngularVelocity(float*) noexcept = 0;
            virtual int32_t __stdcall put_MinAngularVelocity(float) noexcept = 0;
            virtual int32_t __stdcall get_MinDirection(winrt::Windows::Foundation::Numerics::float3*) noexcept = 0;
            virtual int32_t __stdcall put_MinDirection(winrt::Windows::Foundation::Numerics::float3) noexcept = 0;
            virtual int32_t __stdcall get_MinLifetime(float*) noexcept = 0;
            virtual int32_t __stdcall put_MinLifetime(float) noexcept = 0;
            virtual int32_t __stdcall get_MinOpacity(float*) noexcept = 0;
            virtual int32_t __stdcall put_MinOpacity(float) noexcept = 0;
            virtual int32_t __stdcall get_MinOrientation(winrt::Windows::Foundation::Numerics::float4*) noexcept = 0;
            virtual int32_t __stdcall put_MinOrientation(winrt::Windows::Foundation::Numerics::float4) noexcept = 0;
            virtual int32_t __stdcall get_MinSize(winrt::Windows::Foundation::Numerics::float3*) noexcept = 0;
            virtual int32_t __stdcall put_MinSize(winrt::Windows::Foundation::Numerics::float3) noexcept = 0;
            virtual int32_t __stdcall get_MinSpeed(float*) noexcept = 0;
            virtual int32_t __stdcall put_MinSpeed(float) noexcept = 0;
            virtual int32_t __stdcall get_MinTint(struct struct_Windows_UI_Color*) noexcept = 0;
            virtual int32_t __stdcall put_MinTint(struct struct_Windows_UI_Color) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Composition::Particles::IParticleScalarBehavior>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Bindings(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Composition::Particles::IParticleScalarBehaviorStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Create(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Composition::Particles::IParticleScalarBindingCollection>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Composition::Particles::IParticleVector2Behavior>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Bindings(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Composition::Particles::IParticleVector2BehaviorStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Create(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Composition::Particles::IParticleVector2BindingCollection>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Composition::Particles::IParticleVector3Behavior>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Bindings(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Composition::Particles::IParticleVector3BehaviorStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Create(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Composition::Particles::IParticleVector3BindingCollection>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Windows::UI::Composition::Particles::IParticleVector4Behavior>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Bindings(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Composition::Particles::IParticleVector4BehaviorStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Create(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Windows::UI::Composition::Particles::IParticleVector4BindingCollection>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <typename D>
    struct consume_Windows_UI_Composition_Particles_IParticleAttractor
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Numerics::float3) Offset() const;
        WINRT_IMPL_AUTO(void) Offset(winrt::Windows::Foundation::Numerics::float3 const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) Radius() const;
        WINRT_IMPL_AUTO(void) Radius(float value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) Strength() const;
        WINRT_IMPL_AUTO(void) Strength(float value) const;
    };
    template <> struct consume<winrt::Windows::UI::Composition::Particles::IParticleAttractor>
    {
        template <typename D> using type = consume_Windows_UI_Composition_Particles_IParticleAttractor<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Composition_Particles_IParticleAttractorCollection
    {
    };
    template <> struct consume<winrt::Windows::UI::Composition::Particles::IParticleAttractorCollection>
    {
        template <typename D> using type = consume_Windows_UI_Composition_Particles_IParticleAttractorCollection<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Composition_Particles_IParticleAttractorStatics
    {
        WINRT_IMPL_AUTO(winrt::Windows::UI::Composition::Particles::ParticleAttractor) Create(winrt::Windows::UI::Composition::Compositor const& compositor) const;
    };
    template <> struct consume<winrt::Windows::UI::Composition::Particles::IParticleAttractorStatics>
    {
        template <typename D> using type = consume_Windows_UI_Composition_Particles_IParticleAttractorStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Composition_Particles_IParticleBaseBehavior
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::UI::Composition::Particles::ParticleInputSource) Input() const;
        WINRT_IMPL_AUTO(void) Input(winrt::Windows::UI::Composition::Particles::ParticleInputSource const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Composition::Particles::IParticleBaseBehavior>
    {
        template <typename D> using type = consume_Windows_UI_Composition_Particles_IParticleBaseBehavior<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Composition_Particles_IParticleBaseBehaviorFactory
    {
    };
    template <> struct consume<winrt::Windows::UI::Composition::Particles::IParticleBaseBehaviorFactory>
    {
        template <typename D> using type = consume_Windows_UI_Composition_Particles_IParticleBaseBehaviorFactory<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Composition_Particles_IParticleBehaviors
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::UI::Composition::Particles::ParticleScalarBehavior) AngularVelocity() const;
        WINRT_IMPL_AUTO(void) AngularVelocity(winrt::Windows::UI::Composition::Particles::ParticleScalarBehavior const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::UI::Composition::Particles::ParticleVector3Behavior) Direction() const;
        WINRT_IMPL_AUTO(void) Direction(winrt::Windows::UI::Composition::Particles::ParticleVector3Behavior const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::UI::Composition::Particles::ParticleVector3Behavior) Force() const;
        WINRT_IMPL_AUTO(void) Force(winrt::Windows::UI::Composition::Particles::ParticleVector3Behavior const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::UI::Composition::Particles::ParticleScalarBehavior) Opacity() const;
        WINRT_IMPL_AUTO(void) Opacity(winrt::Windows::UI::Composition::Particles::ParticleScalarBehavior const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::UI::Composition::Particles::ParticleVector4Behavior) Orientation() const;
        WINRT_IMPL_AUTO(void) Orientation(winrt::Windows::UI::Composition::Particles::ParticleVector4Behavior const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::UI::Composition::Particles::ParticleVector3Behavior) Position() const;
        WINRT_IMPL_AUTO(void) Position(winrt::Windows::UI::Composition::Particles::ParticleVector3Behavior const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::UI::Composition::Particles::ParticleVector2Behavior) Scale() const;
        WINRT_IMPL_AUTO(void) Scale(winrt::Windows::UI::Composition::Particles::ParticleVector2Behavior const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::UI::Composition::Particles::ParticleScalarBehavior) Speed() const;
        WINRT_IMPL_AUTO(void) Speed(winrt::Windows::UI::Composition::Particles::ParticleScalarBehavior const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::UI::Composition::Particles::ParticleColorBehavior) Tint() const;
        WINRT_IMPL_AUTO(void) Tint(winrt::Windows::UI::Composition::Particles::ParticleColorBehavior const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Composition::Particles::IParticleBehaviors>
    {
        template <typename D> using type = consume_Windows_UI_Composition_Particles_IParticleBehaviors<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Composition_Particles_IParticleColorBehavior
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::UI::Composition::Particles::ParticleColorBindingCollection) Bindings() const;
    };
    template <> struct consume<winrt::Windows::UI::Composition::Particles::IParticleColorBehavior>
    {
        template <typename D> using type = consume_Windows_UI_Composition_Particles_IParticleColorBehavior<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Composition_Particles_IParticleColorBehaviorStatics
    {
        WINRT_IMPL_AUTO(winrt::Windows::UI::Composition::Particles::ParticleColorBehavior) Create(winrt::Windows::UI::Composition::Compositor const& compositor) const;
    };
    template <> struct consume<winrt::Windows::UI::Composition::Particles::IParticleColorBehaviorStatics>
    {
        template <typename D> using type = consume_Windows_UI_Composition_Particles_IParticleColorBehaviorStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Composition_Particles_IParticleColorBindingCollection
    {
    };
    template <> struct consume<winrt::Windows::UI::Composition::Particles::IParticleColorBindingCollection>
    {
        template <typename D> using type = consume_Windows_UI_Composition_Particles_IParticleColorBindingCollection<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Composition_Particles_IParticleEmitterVisual
    {
        [[nodiscard]] WINRT_IMPL_AUTO(float) AngularDrag() const;
        WINRT_IMPL_AUTO(void) AngularDrag(float value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::UI::Composition::Particles::ParticleAttractorCollection) Attractors() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::UI::Composition::CompositionBrush) Brush() const;
        WINRT_IMPL_AUTO(void) Brush(winrt::Windows::UI::Composition::CompositionBrush const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Numerics::float3) Drag() const;
        WINRT_IMPL_AUTO(void) Drag(winrt::Windows::Foundation::Numerics::float3 const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) EdgeThickness() const;
        WINRT_IMPL_AUTO(void) EdgeThickness(float value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::UI::Composition::Particles::ParticleEmitFrom) EmitFrom() const;
        WINRT_IMPL_AUTO(void) EmitFrom(winrt::Windows::UI::Composition::Particles::ParticleEmitFrom const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::UI::Composition::CompositionGeometry) EmitterGeometry() const;
        WINRT_IMPL_AUTO(void) EmitterGeometry(winrt::Windows::UI::Composition::CompositionGeometry const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) EmitterLifetime() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::UI::Composition::CompositionViewBox) EmitterViewBox() const;
        WINRT_IMPL_AUTO(void) EmitterViewBox(winrt::Windows::UI::Composition::CompositionViewBox const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Numerics::float3) Force() const;
        WINRT_IMPL_AUTO(void) Force(winrt::Windows::Foundation::Numerics::float3 const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) MaxBurstRateInSeconds() const;
        WINRT_IMPL_AUTO(void) MaxBurstRateInSeconds(float value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(uint32_t) MaxParticleInstances() const;
        WINRT_IMPL_AUTO(void) MaxParticleInstances(uint32_t value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) MaxParticlesPerBurst() const;
        WINRT_IMPL_AUTO(void) MaxParticlesPerBurst(float value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) MinBurstRateInSeconds() const;
        WINRT_IMPL_AUTO(void) MinBurstRateInSeconds(float value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) MinParticlesPerBurst() const;
        WINRT_IMPL_AUTO(void) MinParticlesPerBurst(float value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::UI::Composition::Particles::ParticleBehaviors) ParticleBehaviors() const;
        WINRT_IMPL_AUTO(void) ParticleBehaviors(winrt::Windows::UI::Composition::Particles::ParticleBehaviors const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::UI::Composition::Particles::ParticleGenerator) ParticleGenerator() const;
        WINRT_IMPL_AUTO(void) ParticleGenerator(winrt::Windows::UI::Composition::Particles::ParticleGenerator const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Numerics::float3) TerminalVelocity() const;
        WINRT_IMPL_AUTO(void) TerminalVelocity(winrt::Windows::Foundation::Numerics::float3 const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) Timestep() const;
        WINRT_IMPL_AUTO(void) Timestep(float value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) Torque() const;
        WINRT_IMPL_AUTO(void) Torque(float value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(uint32_t) RandomSeed() const;
        WINRT_IMPL_AUTO(void) RandomSeed(uint32_t value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::UI::Composition::Particles::ParticleSortMode) SortMode() const;
        WINRT_IMPL_AUTO(void) SortMode(winrt::Windows::UI::Composition::Particles::ParticleSortMode const& value) const;
        WINRT_IMPL_AUTO(void) Clear() const;
        WINRT_IMPL_AUTO(void) Pause() const;
        WINRT_IMPL_AUTO(void) Resume() const;
        WINRT_IMPL_AUTO(void) Start(winrt::Windows::Foundation::TimeSpan const& lifetime, winrt::Windows::Foundation::TimeSpan const& preWarmTime, bool loop) const;
        WINRT_IMPL_AUTO(void) Stop() const;
    };
    template <> struct consume<winrt::Windows::UI::Composition::Particles::IParticleEmitterVisual>
    {
        template <typename D> using type = consume_Windows_UI_Composition_Particles_IParticleEmitterVisual<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Composition_Particles_IParticleEmitterVisualStatics
    {
        WINRT_IMPL_AUTO(winrt::Windows::UI::Composition::Particles::ParticleEmitterVisual) Create(winrt::Windows::UI::Composition::Compositor const& compositor) const;
    };
    template <> struct consume<winrt::Windows::UI::Composition::Particles::IParticleEmitterVisualStatics>
    {
        template <typename D> using type = consume_Windows_UI_Composition_Particles_IParticleEmitterVisualStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Composition_Particles_IParticleGenerator
    {
        [[nodiscard]] WINRT_IMPL_AUTO(bool) GenerateShortestAngleBetweenDirections() const;
        WINRT_IMPL_AUTO(void) GenerateShortestAngleBetweenDirections(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) GenerateUniformSizes() const;
        WINRT_IMPL_AUTO(void) GenerateUniformSizes(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) MaxAngularVelocity() const;
        WINRT_IMPL_AUTO(void) MaxAngularVelocity(float value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Numerics::float3) MaxDirection() const;
        WINRT_IMPL_AUTO(void) MaxDirection(winrt::Windows::Foundation::Numerics::float3 const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) MaxLifetime() const;
        WINRT_IMPL_AUTO(void) MaxLifetime(float value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) MaxOpacity() const;
        WINRT_IMPL_AUTO(void) MaxOpacity(float value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Numerics::float4) MaxOrientation() const;
        WINRT_IMPL_AUTO(void) MaxOrientation(winrt::Windows::Foundation::Numerics::float4 const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Numerics::float3) MaxSize() const;
        WINRT_IMPL_AUTO(void) MaxSize(winrt::Windows::Foundation::Numerics::float3 const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) MaxSpeed() const;
        WINRT_IMPL_AUTO(void) MaxSpeed(float value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::UI::Color) MaxTint() const;
        WINRT_IMPL_AUTO(void) MaxTint(winrt::Windows::UI::Color const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) MinAngularVelocity() const;
        WINRT_IMPL_AUTO(void) MinAngularVelocity(float value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Numerics::float3) MinDirection() const;
        WINRT_IMPL_AUTO(void) MinDirection(winrt::Windows::Foundation::Numerics::float3 const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) MinLifetime() const;
        WINRT_IMPL_AUTO(void) MinLifetime(float value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) MinOpacity() const;
        WINRT_IMPL_AUTO(void) MinOpacity(float value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Numerics::float4) MinOrientation() const;
        WINRT_IMPL_AUTO(void) MinOrientation(winrt::Windows::Foundation::Numerics::float4 const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Numerics::float3) MinSize() const;
        WINRT_IMPL_AUTO(void) MinSize(winrt::Windows::Foundation::Numerics::float3 const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) MinSpeed() const;
        WINRT_IMPL_AUTO(void) MinSpeed(float value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::UI::Color) MinTint() const;
        WINRT_IMPL_AUTO(void) MinTint(winrt::Windows::UI::Color const& value) const;
    };
    template <> struct consume<winrt::Windows::UI::Composition::Particles::IParticleGenerator>
    {
        template <typename D> using type = consume_Windows_UI_Composition_Particles_IParticleGenerator<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Composition_Particles_IParticleScalarBehavior
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::UI::Composition::Particles::ParticleScalarBindingCollection) Bindings() const;
    };
    template <> struct consume<winrt::Windows::UI::Composition::Particles::IParticleScalarBehavior>
    {
        template <typename D> using type = consume_Windows_UI_Composition_Particles_IParticleScalarBehavior<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Composition_Particles_IParticleScalarBehaviorStatics
    {
        WINRT_IMPL_AUTO(winrt::Windows::UI::Composition::Particles::ParticleScalarBehavior) Create(winrt::Windows::UI::Composition::Compositor const& compositor) const;
    };
    template <> struct consume<winrt::Windows::UI::Composition::Particles::IParticleScalarBehaviorStatics>
    {
        template <typename D> using type = consume_Windows_UI_Composition_Particles_IParticleScalarBehaviorStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Composition_Particles_IParticleScalarBindingCollection
    {
    };
    template <> struct consume<winrt::Windows::UI::Composition::Particles::IParticleScalarBindingCollection>
    {
        template <typename D> using type = consume_Windows_UI_Composition_Particles_IParticleScalarBindingCollection<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Composition_Particles_IParticleVector2Behavior
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::UI::Composition::Particles::ParticleVector2BindingCollection) Bindings() const;
    };
    template <> struct consume<winrt::Windows::UI::Composition::Particles::IParticleVector2Behavior>
    {
        template <typename D> using type = consume_Windows_UI_Composition_Particles_IParticleVector2Behavior<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Composition_Particles_IParticleVector2BehaviorStatics
    {
        WINRT_IMPL_AUTO(winrt::Windows::UI::Composition::Particles::ParticleVector2Behavior) Create(winrt::Windows::UI::Composition::Compositor const& compositor) const;
    };
    template <> struct consume<winrt::Windows::UI::Composition::Particles::IParticleVector2BehaviorStatics>
    {
        template <typename D> using type = consume_Windows_UI_Composition_Particles_IParticleVector2BehaviorStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Composition_Particles_IParticleVector2BindingCollection
    {
    };
    template <> struct consume<winrt::Windows::UI::Composition::Particles::IParticleVector2BindingCollection>
    {
        template <typename D> using type = consume_Windows_UI_Composition_Particles_IParticleVector2BindingCollection<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Composition_Particles_IParticleVector3Behavior
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::UI::Composition::Particles::ParticleVector3BindingCollection) Bindings() const;
    };
    template <> struct consume<winrt::Windows::UI::Composition::Particles::IParticleVector3Behavior>
    {
        template <typename D> using type = consume_Windows_UI_Composition_Particles_IParticleVector3Behavior<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Composition_Particles_IParticleVector3BehaviorStatics
    {
        WINRT_IMPL_AUTO(winrt::Windows::UI::Composition::Particles::ParticleVector3Behavior) Create(winrt::Windows::UI::Composition::Compositor const& compositor) const;
    };
    template <> struct consume<winrt::Windows::UI::Composition::Particles::IParticleVector3BehaviorStatics>
    {
        template <typename D> using type = consume_Windows_UI_Composition_Particles_IParticleVector3BehaviorStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Composition_Particles_IParticleVector3BindingCollection
    {
    };
    template <> struct consume<winrt::Windows::UI::Composition::Particles::IParticleVector3BindingCollection>
    {
        template <typename D> using type = consume_Windows_UI_Composition_Particles_IParticleVector3BindingCollection<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Composition_Particles_IParticleVector4Behavior
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::UI::Composition::Particles::ParticleVector4BindingCollection) Bindings() const;
    };
    template <> struct consume<winrt::Windows::UI::Composition::Particles::IParticleVector4Behavior>
    {
        template <typename D> using type = consume_Windows_UI_Composition_Particles_IParticleVector4Behavior<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Composition_Particles_IParticleVector4BehaviorStatics
    {
        WINRT_IMPL_AUTO(winrt::Windows::UI::Composition::Particles::ParticleVector4Behavior) Create(winrt::Windows::UI::Composition::Compositor const& compositor) const;
    };
    template <> struct consume<winrt::Windows::UI::Composition::Particles::IParticleVector4BehaviorStatics>
    {
        template <typename D> using type = consume_Windows_UI_Composition_Particles_IParticleVector4BehaviorStatics<D>;
    };
    template <typename D>
    struct consume_Windows_UI_Composition_Particles_IParticleVector4BindingCollection
    {
    };
    template <> struct consume<winrt::Windows::UI::Composition::Particles::IParticleVector4BindingCollection>
    {
        template <typename D> using type = consume_Windows_UI_Composition_Particles_IParticleVector4BindingCollection<D>;
    };
    struct struct_Windows_UI_Composition_Particles_ParticleColorBinding
    {
        int32_t BindingType;
        winrt::Windows::Foundation::Numerics::float3 Output;
    };
    template <> struct abi<Windows::UI::Composition::Particles::ParticleColorBinding>
    {
        using type = struct_Windows_UI_Composition_Particles_ParticleColorBinding;
    };
    struct struct_Windows_UI_Composition_Particles_ParticleScalarBinding
    {
        int32_t BindingType;
        float Output;
    };
    template <> struct abi<Windows::UI::Composition::Particles::ParticleScalarBinding>
    {
        using type = struct_Windows_UI_Composition_Particles_ParticleScalarBinding;
    };
    struct struct_Windows_UI_Composition_Particles_ParticleVector2Binding
    {
        int32_t BindingType;
        winrt::Windows::Foundation::Numerics::float2 Output;
    };
    template <> struct abi<Windows::UI::Composition::Particles::ParticleVector2Binding>
    {
        using type = struct_Windows_UI_Composition_Particles_ParticleVector2Binding;
    };
    struct struct_Windows_UI_Composition_Particles_ParticleVector3Binding
    {
        int32_t BindingType;
        winrt::Windows::Foundation::Numerics::float3 Output;
    };
    template <> struct abi<Windows::UI::Composition::Particles::ParticleVector3Binding>
    {
        using type = struct_Windows_UI_Composition_Particles_ParticleVector3Binding;
    };
    struct struct_Windows_UI_Composition_Particles_ParticleVector4Binding
    {
        int32_t BindingType;
        winrt::Windows::Foundation::Numerics::float4 Output;
    };
    template <> struct abi<Windows::UI::Composition::Particles::ParticleVector4Binding>
    {
        using type = struct_Windows_UI_Composition_Particles_ParticleVector4Binding;
    };
}
#endif
