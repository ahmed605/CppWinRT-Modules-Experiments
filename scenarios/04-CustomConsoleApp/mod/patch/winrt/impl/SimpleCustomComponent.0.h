// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.3.4.5

#pragma once
#ifndef WINRT_SimpleCustomComponent_0_H
#define WINRT_SimpleCustomComponent_0_H
WINRT_EXPORT namespace winrt::SimpleCustomComponent
{
    struct IClass;
    struct Class;
}
// NOTE: all specializations below will require additional module exports from cppwinrt
// One option is to group all authoring support into a separate module partition, say
// winrt.component.  It's still exposing a few impl details (which can't be moved
// without breaking existing code), but normal consumers would be less likely to accesss.
namespace winrt::impl
{
    template <> struct category<winrt::SimpleCustomComponent::IClass>{ using type = interface_category; };
    template <> struct category<winrt::SimpleCustomComponent::Class>{ using type = class_category; };
    // workaround ICE which occurs if guid_v invoked after name_v
    template <> inline constexpr guid guid_v<winrt::SimpleCustomComponent::IClass>{ 0x4AC07963,0x949C,0x5154,{ 0x9E,0xD6,0xAE,0xFC,0x7B,0xDF,0xA3,0x79 } }; // 4AC07963-949C-5154-9ED6-AEFC7BDFA379
    template <> inline constexpr auto& name_v<winrt::SimpleCustomComponent::Class> = L"SimpleCustomComponent.Class";
    template <> inline constexpr auto& name_v<winrt::SimpleCustomComponent::IClass> = L"SimpleCustomComponent.IClass";
    //template <> inline constexpr guid guid_v<winrt::SimpleCustomComponent::IClass>{ 0x4AC07963,0x949C,0x5154,{ 0x9E,0xD6,0xAE,0xFC,0x7B,0xDF,0xA3,0x79 } }; // 4AC07963-949C-5154-9ED6-AEFC7BDFA379
    template <> struct default_interface<winrt::SimpleCustomComponent::Class>{ using type = winrt::SimpleCustomComponent::IClass; };
    template <> struct abi<winrt::SimpleCustomComponent::IClass>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_MyProperty(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MyProperty(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_MyTestString(void**) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_SimpleCustomComponent_IClass
    {
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) MyProperty() const;
        WINRT_IMPL_AUTO(void) MyProperty(int32_t value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) MyTestString() const;
    };
    template <> struct consume<winrt::SimpleCustomComponent::IClass>
    {
        template <typename D> using type = consume_SimpleCustomComponent_IClass<D>;
    };
}
#endif
