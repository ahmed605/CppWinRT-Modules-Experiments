// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.210505.3

#ifndef WINRT_Windows_Management_Deployment_1_H
#define WINRT_Windows_Management_Deployment_1_H
#include "winrt/impl/Windows.Management.Deployment.0.h"
WINRT_EXPORT namespace winrt::Windows::Management::Deployment
{
    struct __declspec(empty_bases) IAddPackageOptions :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IAddPackageOptions>
    {
        IAddPackageOptions(std::nullptr_t = nullptr) noexcept {}
        IAddPackageOptions(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IAddPackageOptions(IAddPackageOptions const&) noexcept = default;
        IAddPackageOptions(IAddPackageOptions&&) noexcept = default;
        IAddPackageOptions& operator=(IAddPackageOptions const&) & noexcept = default;
        IAddPackageOptions& operator=(IAddPackageOptions&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IAppInstallerManager :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IAppInstallerManager>
    {
        IAppInstallerManager(std::nullptr_t = nullptr) noexcept {}
        IAppInstallerManager(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IAppInstallerManager(IAppInstallerManager const&) noexcept = default;
        IAppInstallerManager(IAppInstallerManager&&) noexcept = default;
        IAppInstallerManager& operator=(IAppInstallerManager const&) & noexcept = default;
        IAppInstallerManager& operator=(IAppInstallerManager&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IAppInstallerManagerStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IAppInstallerManagerStatics>
    {
        IAppInstallerManagerStatics(std::nullptr_t = nullptr) noexcept {}
        IAppInstallerManagerStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IAppInstallerManagerStatics(IAppInstallerManagerStatics const&) noexcept = default;
        IAppInstallerManagerStatics(IAppInstallerManagerStatics&&) noexcept = default;
        IAppInstallerManagerStatics& operator=(IAppInstallerManagerStatics const&) & noexcept = default;
        IAppInstallerManagerStatics& operator=(IAppInstallerManagerStatics&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IAutoUpdateSettingsOptions :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IAutoUpdateSettingsOptions>
    {
        IAutoUpdateSettingsOptions(std::nullptr_t = nullptr) noexcept {}
        IAutoUpdateSettingsOptions(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IAutoUpdateSettingsOptions(IAutoUpdateSettingsOptions const&) noexcept = default;
        IAutoUpdateSettingsOptions(IAutoUpdateSettingsOptions&&) noexcept = default;
        IAutoUpdateSettingsOptions& operator=(IAutoUpdateSettingsOptions const&) & noexcept = default;
        IAutoUpdateSettingsOptions& operator=(IAutoUpdateSettingsOptions&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IAutoUpdateSettingsOptionsStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IAutoUpdateSettingsOptionsStatics>
    {
        IAutoUpdateSettingsOptionsStatics(std::nullptr_t = nullptr) noexcept {}
        IAutoUpdateSettingsOptionsStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IAutoUpdateSettingsOptionsStatics(IAutoUpdateSettingsOptionsStatics const&) noexcept = default;
        IAutoUpdateSettingsOptionsStatics(IAutoUpdateSettingsOptionsStatics&&) noexcept = default;
        IAutoUpdateSettingsOptionsStatics& operator=(IAutoUpdateSettingsOptionsStatics const&) & noexcept = default;
        IAutoUpdateSettingsOptionsStatics& operator=(IAutoUpdateSettingsOptionsStatics&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ICreateSharedPackageContainerOptions :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ICreateSharedPackageContainerOptions>
    {
        ICreateSharedPackageContainerOptions(std::nullptr_t = nullptr) noexcept {}
        ICreateSharedPackageContainerOptions(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ICreateSharedPackageContainerOptions(ICreateSharedPackageContainerOptions const&) noexcept = default;
        ICreateSharedPackageContainerOptions(ICreateSharedPackageContainerOptions&&) noexcept = default;
        ICreateSharedPackageContainerOptions& operator=(ICreateSharedPackageContainerOptions const&) & noexcept = default;
        ICreateSharedPackageContainerOptions& operator=(ICreateSharedPackageContainerOptions&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ICreateSharedPackageContainerResult :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ICreateSharedPackageContainerResult>
    {
        ICreateSharedPackageContainerResult(std::nullptr_t = nullptr) noexcept {}
        ICreateSharedPackageContainerResult(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ICreateSharedPackageContainerResult(ICreateSharedPackageContainerResult const&) noexcept = default;
        ICreateSharedPackageContainerResult(ICreateSharedPackageContainerResult&&) noexcept = default;
        ICreateSharedPackageContainerResult& operator=(ICreateSharedPackageContainerResult const&) & noexcept = default;
        ICreateSharedPackageContainerResult& operator=(ICreateSharedPackageContainerResult&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IDeleteSharedPackageContainerOptions :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IDeleteSharedPackageContainerOptions>
    {
        IDeleteSharedPackageContainerOptions(std::nullptr_t = nullptr) noexcept {}
        IDeleteSharedPackageContainerOptions(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IDeleteSharedPackageContainerOptions(IDeleteSharedPackageContainerOptions const&) noexcept = default;
        IDeleteSharedPackageContainerOptions(IDeleteSharedPackageContainerOptions&&) noexcept = default;
        IDeleteSharedPackageContainerOptions& operator=(IDeleteSharedPackageContainerOptions const&) & noexcept = default;
        IDeleteSharedPackageContainerOptions& operator=(IDeleteSharedPackageContainerOptions&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IDeleteSharedPackageContainerResult :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IDeleteSharedPackageContainerResult>
    {
        IDeleteSharedPackageContainerResult(std::nullptr_t = nullptr) noexcept {}
        IDeleteSharedPackageContainerResult(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IDeleteSharedPackageContainerResult(IDeleteSharedPackageContainerResult const&) noexcept = default;
        IDeleteSharedPackageContainerResult(IDeleteSharedPackageContainerResult&&) noexcept = default;
        IDeleteSharedPackageContainerResult& operator=(IDeleteSharedPackageContainerResult const&) & noexcept = default;
        IDeleteSharedPackageContainerResult& operator=(IDeleteSharedPackageContainerResult&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IDeploymentResult :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IDeploymentResult>
    {
        IDeploymentResult(std::nullptr_t = nullptr) noexcept {}
        IDeploymentResult(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IDeploymentResult(IDeploymentResult const&) noexcept = default;
        IDeploymentResult(IDeploymentResult&&) noexcept = default;
        IDeploymentResult& operator=(IDeploymentResult const&) & noexcept = default;
        IDeploymentResult& operator=(IDeploymentResult&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IDeploymentResult2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IDeploymentResult2>
    {
        IDeploymentResult2(std::nullptr_t = nullptr) noexcept {}
        IDeploymentResult2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IDeploymentResult2(IDeploymentResult2 const&) noexcept = default;
        IDeploymentResult2(IDeploymentResult2&&) noexcept = default;
        IDeploymentResult2& operator=(IDeploymentResult2 const&) & noexcept = default;
        IDeploymentResult2& operator=(IDeploymentResult2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IFindSharedPackageContainerOptions :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IFindSharedPackageContainerOptions>
    {
        IFindSharedPackageContainerOptions(std::nullptr_t = nullptr) noexcept {}
        IFindSharedPackageContainerOptions(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IFindSharedPackageContainerOptions(IFindSharedPackageContainerOptions const&) noexcept = default;
        IFindSharedPackageContainerOptions(IFindSharedPackageContainerOptions&&) noexcept = default;
        IFindSharedPackageContainerOptions& operator=(IFindSharedPackageContainerOptions const&) & noexcept = default;
        IFindSharedPackageContainerOptions& operator=(IFindSharedPackageContainerOptions&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPackageAllUserProvisioningOptions :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPackageAllUserProvisioningOptions>
    {
        IPackageAllUserProvisioningOptions(std::nullptr_t = nullptr) noexcept {}
        IPackageAllUserProvisioningOptions(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPackageAllUserProvisioningOptions(IPackageAllUserProvisioningOptions const&) noexcept = default;
        IPackageAllUserProvisioningOptions(IPackageAllUserProvisioningOptions&&) noexcept = default;
        IPackageAllUserProvisioningOptions& operator=(IPackageAllUserProvisioningOptions const&) & noexcept = default;
        IPackageAllUserProvisioningOptions& operator=(IPackageAllUserProvisioningOptions&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPackageManager :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPackageManager>
    {
        IPackageManager(std::nullptr_t = nullptr) noexcept {}
        IPackageManager(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPackageManager(IPackageManager const&) noexcept = default;
        IPackageManager(IPackageManager&&) noexcept = default;
        IPackageManager& operator=(IPackageManager const&) & noexcept = default;
        IPackageManager& operator=(IPackageManager&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPackageManager10 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPackageManager10>
    {
        IPackageManager10(std::nullptr_t = nullptr) noexcept {}
        IPackageManager10(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPackageManager10(IPackageManager10 const&) noexcept = default;
        IPackageManager10(IPackageManager10&&) noexcept = default;
        IPackageManager10& operator=(IPackageManager10 const&) & noexcept = default;
        IPackageManager10& operator=(IPackageManager10&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPackageManager2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPackageManager2>
    {
        IPackageManager2(std::nullptr_t = nullptr) noexcept {}
        IPackageManager2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPackageManager2(IPackageManager2 const&) noexcept = default;
        IPackageManager2(IPackageManager2&&) noexcept = default;
        IPackageManager2& operator=(IPackageManager2 const&) & noexcept = default;
        IPackageManager2& operator=(IPackageManager2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPackageManager3 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPackageManager3>
    {
        IPackageManager3(std::nullptr_t = nullptr) noexcept {}
        IPackageManager3(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPackageManager3(IPackageManager3 const&) noexcept = default;
        IPackageManager3(IPackageManager3&&) noexcept = default;
        IPackageManager3& operator=(IPackageManager3 const&) & noexcept = default;
        IPackageManager3& operator=(IPackageManager3&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPackageManager4 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPackageManager4>
    {
        IPackageManager4(std::nullptr_t = nullptr) noexcept {}
        IPackageManager4(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPackageManager4(IPackageManager4 const&) noexcept = default;
        IPackageManager4(IPackageManager4&&) noexcept = default;
        IPackageManager4& operator=(IPackageManager4 const&) & noexcept = default;
        IPackageManager4& operator=(IPackageManager4&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPackageManager5 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPackageManager5>
    {
        IPackageManager5(std::nullptr_t = nullptr) noexcept {}
        IPackageManager5(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPackageManager5(IPackageManager5 const&) noexcept = default;
        IPackageManager5(IPackageManager5&&) noexcept = default;
        IPackageManager5& operator=(IPackageManager5 const&) & noexcept = default;
        IPackageManager5& operator=(IPackageManager5&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPackageManager6 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPackageManager6>
    {
        IPackageManager6(std::nullptr_t = nullptr) noexcept {}
        IPackageManager6(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPackageManager6(IPackageManager6 const&) noexcept = default;
        IPackageManager6(IPackageManager6&&) noexcept = default;
        IPackageManager6& operator=(IPackageManager6 const&) & noexcept = default;
        IPackageManager6& operator=(IPackageManager6&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPackageManager7 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPackageManager7>
    {
        IPackageManager7(std::nullptr_t = nullptr) noexcept {}
        IPackageManager7(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPackageManager7(IPackageManager7 const&) noexcept = default;
        IPackageManager7(IPackageManager7&&) noexcept = default;
        IPackageManager7& operator=(IPackageManager7 const&) & noexcept = default;
        IPackageManager7& operator=(IPackageManager7&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPackageManager8 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPackageManager8>
    {
        IPackageManager8(std::nullptr_t = nullptr) noexcept {}
        IPackageManager8(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPackageManager8(IPackageManager8 const&) noexcept = default;
        IPackageManager8(IPackageManager8&&) noexcept = default;
        IPackageManager8& operator=(IPackageManager8 const&) & noexcept = default;
        IPackageManager8& operator=(IPackageManager8&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPackageManager9 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPackageManager9>
    {
        IPackageManager9(std::nullptr_t = nullptr) noexcept {}
        IPackageManager9(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPackageManager9(IPackageManager9 const&) noexcept = default;
        IPackageManager9(IPackageManager9&&) noexcept = default;
        IPackageManager9& operator=(IPackageManager9 const&) & noexcept = default;
        IPackageManager9& operator=(IPackageManager9&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPackageManagerDebugSettings :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPackageManagerDebugSettings>
    {
        IPackageManagerDebugSettings(std::nullptr_t = nullptr) noexcept {}
        IPackageManagerDebugSettings(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPackageManagerDebugSettings(IPackageManagerDebugSettings const&) noexcept = default;
        IPackageManagerDebugSettings(IPackageManagerDebugSettings&&) noexcept = default;
        IPackageManagerDebugSettings& operator=(IPackageManagerDebugSettings const&) & noexcept = default;
        IPackageManagerDebugSettings& operator=(IPackageManagerDebugSettings&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPackageUserInformation :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPackageUserInformation>
    {
        IPackageUserInformation(std::nullptr_t = nullptr) noexcept {}
        IPackageUserInformation(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPackageUserInformation(IPackageUserInformation const&) noexcept = default;
        IPackageUserInformation(IPackageUserInformation&&) noexcept = default;
        IPackageUserInformation& operator=(IPackageUserInformation const&) & noexcept = default;
        IPackageUserInformation& operator=(IPackageUserInformation&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPackageVolume :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPackageVolume>
    {
        IPackageVolume(std::nullptr_t = nullptr) noexcept {}
        IPackageVolume(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPackageVolume(IPackageVolume const&) noexcept = default;
        IPackageVolume(IPackageVolume&&) noexcept = default;
        IPackageVolume& operator=(IPackageVolume const&) & noexcept = default;
        IPackageVolume& operator=(IPackageVolume&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IPackageVolume2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPackageVolume2>
    {
        IPackageVolume2(std::nullptr_t = nullptr) noexcept {}
        IPackageVolume2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IPackageVolume2(IPackageVolume2 const&) noexcept = default;
        IPackageVolume2(IPackageVolume2&&) noexcept = default;
        IPackageVolume2& operator=(IPackageVolume2 const&) & noexcept = default;
        IPackageVolume2& operator=(IPackageVolume2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IRegisterPackageOptions :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IRegisterPackageOptions>
    {
        IRegisterPackageOptions(std::nullptr_t = nullptr) noexcept {}
        IRegisterPackageOptions(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IRegisterPackageOptions(IRegisterPackageOptions const&) noexcept = default;
        IRegisterPackageOptions(IRegisterPackageOptions&&) noexcept = default;
        IRegisterPackageOptions& operator=(IRegisterPackageOptions const&) & noexcept = default;
        IRegisterPackageOptions& operator=(IRegisterPackageOptions&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ISharedPackageContainer :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ISharedPackageContainer>
    {
        ISharedPackageContainer(std::nullptr_t = nullptr) noexcept {}
        ISharedPackageContainer(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ISharedPackageContainer(ISharedPackageContainer const&) noexcept = default;
        ISharedPackageContainer(ISharedPackageContainer&&) noexcept = default;
        ISharedPackageContainer& operator=(ISharedPackageContainer const&) & noexcept = default;
        ISharedPackageContainer& operator=(ISharedPackageContainer&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ISharedPackageContainerManager :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ISharedPackageContainerManager>
    {
        ISharedPackageContainerManager(std::nullptr_t = nullptr) noexcept {}
        ISharedPackageContainerManager(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ISharedPackageContainerManager(ISharedPackageContainerManager const&) noexcept = default;
        ISharedPackageContainerManager(ISharedPackageContainerManager&&) noexcept = default;
        ISharedPackageContainerManager& operator=(ISharedPackageContainerManager const&) & noexcept = default;
        ISharedPackageContainerManager& operator=(ISharedPackageContainerManager&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ISharedPackageContainerManagerStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ISharedPackageContainerManagerStatics>
    {
        ISharedPackageContainerManagerStatics(std::nullptr_t = nullptr) noexcept {}
        ISharedPackageContainerManagerStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ISharedPackageContainerManagerStatics(ISharedPackageContainerManagerStatics const&) noexcept = default;
        ISharedPackageContainerManagerStatics(ISharedPackageContainerManagerStatics&&) noexcept = default;
        ISharedPackageContainerManagerStatics& operator=(ISharedPackageContainerManagerStatics const&) & noexcept = default;
        ISharedPackageContainerManagerStatics& operator=(ISharedPackageContainerManagerStatics&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ISharedPackageContainerMember :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ISharedPackageContainerMember>
    {
        ISharedPackageContainerMember(std::nullptr_t = nullptr) noexcept {}
        ISharedPackageContainerMember(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ISharedPackageContainerMember(ISharedPackageContainerMember const&) noexcept = default;
        ISharedPackageContainerMember(ISharedPackageContainerMember&&) noexcept = default;
        ISharedPackageContainerMember& operator=(ISharedPackageContainerMember const&) & noexcept = default;
        ISharedPackageContainerMember& operator=(ISharedPackageContainerMember&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ISharedPackageContainerMemberFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ISharedPackageContainerMemberFactory>
    {
        ISharedPackageContainerMemberFactory(std::nullptr_t = nullptr) noexcept {}
        ISharedPackageContainerMemberFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        ISharedPackageContainerMemberFactory(ISharedPackageContainerMemberFactory const&) noexcept = default;
        ISharedPackageContainerMemberFactory(ISharedPackageContainerMemberFactory&&) noexcept = default;
        ISharedPackageContainerMemberFactory& operator=(ISharedPackageContainerMemberFactory const&) & noexcept = default;
        ISharedPackageContainerMemberFactory& operator=(ISharedPackageContainerMemberFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IStagePackageOptions :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IStagePackageOptions>
    {
        IStagePackageOptions(std::nullptr_t = nullptr) noexcept {}
        IStagePackageOptions(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IStagePackageOptions(IStagePackageOptions const&) noexcept = default;
        IStagePackageOptions(IStagePackageOptions&&) noexcept = default;
        IStagePackageOptions& operator=(IStagePackageOptions const&) & noexcept = default;
        IStagePackageOptions& operator=(IStagePackageOptions&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IUpdateSharedPackageContainerOptions :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IUpdateSharedPackageContainerOptions>
    {
        IUpdateSharedPackageContainerOptions(std::nullptr_t = nullptr) noexcept {}
        IUpdateSharedPackageContainerOptions(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IUpdateSharedPackageContainerOptions(IUpdateSharedPackageContainerOptions const&) noexcept = default;
        IUpdateSharedPackageContainerOptions(IUpdateSharedPackageContainerOptions&&) noexcept = default;
        IUpdateSharedPackageContainerOptions& operator=(IUpdateSharedPackageContainerOptions const&) & noexcept = default;
        IUpdateSharedPackageContainerOptions& operator=(IUpdateSharedPackageContainerOptions&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IUpdateSharedPackageContainerResult :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IUpdateSharedPackageContainerResult>
    {
        IUpdateSharedPackageContainerResult(std::nullptr_t = nullptr) noexcept {}
        IUpdateSharedPackageContainerResult(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IUpdateSharedPackageContainerResult(IUpdateSharedPackageContainerResult const&) noexcept = default;
        IUpdateSharedPackageContainerResult(IUpdateSharedPackageContainerResult&&) noexcept = default;
        IUpdateSharedPackageContainerResult& operator=(IUpdateSharedPackageContainerResult const&) & noexcept = default;
        IUpdateSharedPackageContainerResult& operator=(IUpdateSharedPackageContainerResult&&) & noexcept = default;
    };
}
#endif
